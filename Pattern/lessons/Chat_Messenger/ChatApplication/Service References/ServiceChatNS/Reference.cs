//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.19448
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChatApplication.ServiceChatNS {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceChatNS.IChat", CallbackContract=typeof(ChatApplication.ServiceChatNS.IChatCallback))]
    public interface IChat {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/SendMessageToAll", ReplyAction="http://tempuri.org/IChat/SendMessageToAllResponse")]
        void SendMessageToAll(string message, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/SendMessageToAll", ReplyAction="http://tempuri.org/IChat/SendMessageToAllResponse")]
        System.Threading.Tasks.Task SendMessageToAllAsync(string message, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/Connect", ReplyAction="http://tempuri.org/IChat/ConnectResponse")]
        void Connect(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/Connect", ReplyAction="http://tempuri.org/IChat/ConnectResponse")]
        System.Threading.Tasks.Task ConnectAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/Disconect", ReplyAction="http://tempuri.org/IChat/DisconectResponse")]
        void Disconect(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/Disconect", ReplyAction="http://tempuri.org/IChat/DisconectResponse")]
        System.Threading.Tasks.Task DisconectAsync(string userName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/NewMessage")]
        void NewMessage(string t);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/NewPrivateMessage")]
        void NewPrivateMessage(string t);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/RefreshListOnline")]
        void RefreshListOnline(string[] list);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatChannel : ChatApplication.ServiceChatNS.IChat, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatClient : System.ServiceModel.DuplexClientBase<ChatApplication.ServiceChatNS.IChat>, ChatApplication.ServiceChatNS.IChat {
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SendMessageToAll(string message, string userName) {
            base.Channel.SendMessageToAll(message, userName);
        }
        
        public System.Threading.Tasks.Task SendMessageToAllAsync(string message, string userName) {
            return base.Channel.SendMessageToAllAsync(message, userName);
        }
        
        public void Connect(string userName) {
            base.Channel.Connect(userName);
        }
        
        public System.Threading.Tasks.Task ConnectAsync(string userName) {
            return base.Channel.ConnectAsync(userName);
        }
        
        public void Disconect(string userName) {
            base.Channel.Disconect(userName);
        }
        
        public System.Threading.Tasks.Task DisconectAsync(string userName) {
            return base.Channel.DisconectAsync(userName);
        }
    }
}
