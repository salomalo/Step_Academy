<?xml version="1.0" encoding="windows-1251" ?>
<?xml:stylesheet type="text/xsl" href="common/layout.xsl" ?>

<lesson title="Урок №2" next="section04.xml" prev="section023.xml" summ="0">
<h2>Первый проект.</h2>

<p>
Один человек по имени Сергей, описывая свои впечатления о Праге написал мне:
</p>

<p>
"Если вы попали на официанта не говорящего по-русски, то берите меню и показывайте пальцем что вы хотите. Иногда похожие слова обозначают разные вещи. Например, слово фрукты по-чешски звучит почти как овощи. Угадайте что вам принесут, если вы попросите овощной салат?:)"
</p>

<p>
Неизвестный Вам Сергей хотел предостеречь своих друзей о возможной ошибке, но вряд ли он смог бы помочь чем-нибудь, если бы вместо официанта, нам приходилось бы общаться с компьютером. Последнему, увы, неведомо, в какую строку меню, Вы тычете пальцем. Компьютер педантично следует лишь четким указаниям. И указания эти должны даваться с помощью специальных команд. Команды в свою очередь составляют целые самостоятельные языки. Языки, понятные компьютеру - языки программирования. Вывод: чтобы найти общий язык с официантом-чехом надо быть человеком находчивым. Чтобы найти общий язык с компьютером, надо этот язык знать.
</p>

<p>
Из первого раздела Вам уже известно, что C - это язык  программирования. Язык, который дает нам возможность вразумительно объяснить компьютеру, что мы от него хотим. Хотя, если быть до конца откровенными,  компьютер понимает только один язык – язык машинных кодов. Для примера, программа, которая выводит на экран фразу «Hello, world!», выглядит приблизительно так на "родном" для компьютера языке: 
</p>

<example>
MZР   __ + @ А ¦ ¦ -!+L-!T

$ PE L ¦-7 р ¤! 
` Р oK  Р ў+      0  e+   
t + Г·t3+ZГс¤Н$М_тUЛьЬ¤+M +tUў- tVА+¤+¦Ф№+¤-;-wGГ=xФ№+
tАс°-щЗ-Л_Ф№+f;s §lФ№+Л +u"бАФ№+¤+MАс°ЎDАt Э+- 3+
ыўы·ы°ыЎыЇЛD$П$._4Ч№++  ._ dЛ4 Ў-ubSЛdг4 +__є --fУЙf-+
-+ЙA+@У№+Л-[Xf +tRPRVh·ў+ш_S Z+єfО-fЛцf-d¤+§ RfRfh ш4 
Л+Zы¦SшC¤д-ы¦¤+ьМ-¤++¤_e fМ+fО_fО¦f¤бЛЁdЎ t3+ОшАс°Л§АФ№+-
dб4 ЙdЙ§4 f_f _t dЛ4 Ў-uSSЛdг4 +__є --fУЙf-+-+ЙA+@У№+Л-[
+єЙ]№fМ+fО-fЛц+ыf-d¤+§ RfRfh шз Л+Zы+Sш¦ ¤д-ы+fО_fО¦¤+эm№¤+
_>] Л¦Л+ЛMЛm _сбшЬ№+Л 9ШФ№+t§Л§pФ№+ш№) fd¦ __+RPбшЬ
№+Л 9ШФ№+tЛ§pФ№+шС) + +Э_YН¦ў+ ._5lЧ№+f-Н¦ў+ +f+
u ._5lЧ№+f-&amp;ЛZ¶QW&amp;бфЬ№+&amp;Л &amp;ЛJf&amp;ОB_Ф№
+f;sЛlФ№+Л&amp;lt; _t=ИФ№+_G¶u_O¶WfМ+-чfЛ№3+М-Ас°
</example>

<p>
Вы скажите что в таком коде писать невозможно и будете абсолютно правы!! Но, так мы писать и не будем. Для этого и нужен язык программирования, чтобы облегчить составление программ. Языки программирования делятся на две основные группы ИНТЕРПРЕТИРУЕМЫЕ и КОМПИЛИРУЕМЫЕ. Такое деление связано с тем, какая специализированная программа переводит команды с языка программирования на машинный язык - КОМПИЛЯТОР или ИНТЕРПРЕТАТОР. Давайте выясним в чем же разница между ними. Представим, что у нас есть файл, в котором содержится набор команд 
</p>

<h5>Ситуация первая. Команды написаны на интерпретируемом языке.</h5>
<p>
Каждый раз при запуске программы интерпретатор  осуществляет проверку кода построчно. Если ошибок в синтаксисе нет, команды будут преобразованны в машинный код (набор инструкций для процессора). Программа запустится на выполнение. Если есть ошибка, интерпретатор остановится и Вам будет предложено ее исправить и запустить программу снова. Но, даже если ошибок больше нет и программа окончательно дописана Вами, при каждом её запуске будет срабатывать интерпретатор и опять осуществлять проверку кода. Таким образом, можно сделать выводы, что машинная версия кода нигде не сохраняется.  Минусы такого подхода состоят в том, что скорость запуска программы снижается, но отключить проверку невозможно.    
</p>

<h5>Ситуация вторая. Команды написаны на компилируемом языке.</h5>
<p>
Компилятор действует почти также, как и интерпретатор, т. е. проверяет код построчно. Но если встречает ошибку, то не останавливается, а исследует код до конца, выявляя все последующие ошибки и выдавая о них сообщения. Кроме того компилятор формирует специальный объектный файл с расширением .OBJ. В этом файле хранится текст программы переведенный на машинный язык. Однако, компьютер не работает напрямую с этим файлом. Существует такое понятие, как компоновка или линковка. Линковщик - это еще одна специальная программа, которая собирает машинный код (из файла с расширением .OBJ) и различные вспомогательные данные в единый исполняемый файл с расширением .EXE.  Такой файл может быть запущен на выполнение как отдельная, самостоятельная программа и в его запуске компилятор уже не принимает никакого участия. 
</p>

<p>
Язык С, к изучению которого вы приступаете является компилируемым языком. В нашем случае, при работе с оболочкой Microsoft Visual Studio.NET  вызов компилятора осуществляется автоматически и позволяет переводить команды языка С  в машинный код, что называется - "легким движением руки".
</p>

<h3>Проба пера</h3>

<p>
Один из основателей языка С, Брайэн Керниган, сказал: "Единственный способ изучать новый язык программирования - писать на нем программы." . Чем мы с Вами и начнем, сейчас, заниматься.
</p>

 <p>
Так уж повелось у программистов, что первая программа должна обязательно поприветствовать мир. В буквальном смысле и желательно на английском языке. Фактически, задача нашей программы просто вывести на экран фразу "Hello, world!". 
</p>

<p>
Наверняка, если Вы решили изучать программирование, Вы уже знакомы с пользовательским интерфейсом операционной системы Windows. И, уж точно Вы слыхали о существовании, так называемых текстовых редакторов. Например: Блокнот, Microsoft Word, Word Pad. Итак, чтобы написать письмо или рассказ, другими словами создать текстовый документ, Вы используете текстовый редактор. И, именно он является ОБОЛОЧКОЙ для написания чего-либо на "человеческом" языке. Для программного языка тоже есть своя ОБОЛОЧКА. В ней мы с Вами будем создавать программы и, естественно, об этой ПРОГРАММНОЙ ОБОЛОЧКЕ сейчас пойдет речь. 
</p>


<p>
Для запуска программной оболочки 
нужно нажать кнопку «Пуск», выбрать пункт «Программы», затем выпадающее меню «Microsoft Visual Studio NET 2003» и, наконец,  одноименный пункт«Microsoft Visual Studio NET 2003».
После запуска приложения вы увидите нечто подобное: 
</p><br/>
<center><img src="images\1.jpg"></img></center>
<br/>
<p>
После того, как Вы загрузили оболочку, выберите пункт меню File->New->Project перед Вами появиться следующее диалоговое окно:
</p>
<br/>
<center><img src="images\2.jpg"></img></center>
<br/>
<p>
Сейчас, попробуем создать проект, который и будет, в конечном итоге, представлять нашу программу. Детальней, что такое проект, мы разберемся попозже, когда будем писать большие программы. Пока будем представлять себе   проект как объединение  нескольких файлов.

<ul>

А теперь давайте по шагам: 
<li>
В открывшемся диалоговом окне New Project(новый проект)  в списке Project Types(тип проекта) выберите тип проекта Visual C++ Project</li>
<li>
В списке  Templates (шаблоны) - Win32 Console Project
</li>
<li>
В поле Location укажем на каком диске и в какой папке будет находится наш проект. Для этого введите в этом поле  C:\Projects (или удобное Вам имя папки, где будут храниться все Ваши домашние проекты) 
</li>
<li>
Дадим имя нашему ПРОЕКТУ – для этого введите в поле Name имя проекта Hello.
</li>
<li>
Теперь можно нажать кнопку OK. 
</li>
<li>
Перед Вами открылось окно настройки свойств проекта - выберите вкладку Application Settings. 
</li>
<li>
Установите галочку в поле Empty Project - это значит, что мы создаем пустой проект. 
</li>
<li>
Теперь нажимайте кнопку Finish. 
</li>
</ul>
</p><br/>
<center><img src="images\2_1.jpg"></img></center>
<br/>
<p>
Итак, мы подготовили место для размещения нашей программы. 
</p>
<p>
<ul>
Не останавливаясь на достигнутом, добавим в проект чистый файл. В нем будем набирать текст нашей программы. Для этого необходимо выполнить следующие действия:
<li>
Справа появилось окошко под названием Solution Explorer. В нем Вам необходимо щелкнуть правой кнопкой на папке под названием Source Files.</li>
</ul><br/>
<center><img src="images\2_2.jpg"></img></center><br/>
<ul>
<li>
В выпавшем меню выбираем Add->Add New Item...
</li>
</ul><br/>
<center><img src="images\2_3.jpg"></img></center><br/>
<ul>
<li>
Открывается окно выбора файлов.
Опять у вас огромный выбор. Рекомендуем сейчас выбрать значок
C++File (.cpp)(файл, содержащий программу на языке С). 
</li>
</ul><br/>
<center><img src="images\3.jpg"></img></center><br/>
<ul>
<li>
В текстовом поле Name (имя файла) введите имя файла Hello.
</li>
<li>
Нажмите кнопку Open.
</li>
</ul>
</p>

<h3>Пример первой программы на языке C.</h3>

<p>
Перед тем как начать писать программу, давайте введем для удобства понятие комментария. Комментарий - это заметки к программе, которые предназначены исключительно для программиста. Компилятор игнорирует их. Например, с помощью комментария можно обозначить для чего используется та или иная строка программы. В нижеописанном примере указанно, как правильно работать с комментариями.
</p>

<p>
А теперь, в появившемся текстовом окне наберем следующий код:
</p>

<example>
// Это комментарии к программе
// Они выделяются зеленым цветом
// Начинаются комментарии двумя черточками // 
/* если необходимо создать многострочный
комментарий, используется конструкция
/* комментарий */ */

/* Данная строчка подключает в программу библиотеку под названием
 iostream. Библиотека - файл, в котором содержатся описания
 различных функций, реализованных другими программистами.
 Данная программа получила возможность использовать функции
 находящиеся в библиотеке iostream */

#include &lt;iostream&gt;

/* В языке С++ существует понятие пространство имен.
 Это пространство определяет некую область, на которую
 приходятся действия оператора или функции. Для того, чтобы использовать
 оператор, находящийся в определенном пространстве,
 необходимо подключить это пространство в свою программу.
 Ниже подключается пространство под названием std */

using namespace std;

void main() // Начало программы, отсюда программа начнет своё выполнение

// Весь текст программы распологается между фигурными скобками

{	 //Это фигурная скобка 

// Следующая строка выводит на экран приветствие Hello, World!
// Данное действие осуществляется с помощью cout&lt;&lt; Именно для его 
// работы подключалась библиотека и пространство имен, в которых он располагается

  cout&lt;&lt;"Hello, World!\n"; 

// В конце команды стоит точка с запятой. Этим знаком ДОЛЖНА заканчиваться
// каждая команда в языке С.

}
</example>

<p>
Как вы уже знаете, компьютер понимает только язык машинных кодов. И прежде чем программа будет выполняться компьютером, нужно ее перевести на язык машинных кодов. Вы помните, что это будем делать не мы, а КОМПИЛЯТОР. 

Проекты, написанные на C, включают в себя много файлов. Прокомпилируем сразу все файлы, включенные в проект. 

Для этого в строке меню выберете Build (построить), затем Rebuild Solution (перестроить все)
</p><br/>
<center><img src="images\3_1.jpg"></img></center><br/>
<p>
Надеемся, вы набрали текст без ошибок. 
Наша программа успешно переведена на язык машинных кодов и ее можно запустить на выполнение. Запустить программу на выполнение просто.  В меню Debug выбрать Start Without Debugging 
</p><br/>
<center><img src="images\3_2.jpg"></img></center><br/>
<p>
Программа отработает и вы увидите такое вот окно:
</p>
<br/>
<center><img src="images\4.png" width="332" height="155"></img></center><br/>

<p>
Поздравляю! 

Было довольно легко. Не правда ли?

Для того, чтобы закончить работу программы нажмите любую клавишу на клавиатуре (Press any key to continue).
</p>

<h3>Открытие сохраненного проекта</h3>

<p>
Для того чтобы восстановить ранее сохраненный проект на диске запустите Visual Studio (если она у Вас еще не загружена).
Выберите в меню File пункт Open ->Project и укажите имя вашего проекта.
</p><br/>
<center><img src="images\5.jpg"></img></center><br/>
<p>
После того как проект открыт, Вы можете продолжить работу над ним.
</p>


</lesson>