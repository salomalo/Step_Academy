<?xml version="1.0" encoding="windows-1251" ?>
<?xml:stylesheet type="text/xsl" href="common/layout.xsl" ?>

<lesson title="Урок №1" next="section07.xml" prev="section05.xml" summ="1">
<h2>Переменные и константы</h2>
<p>Мы с Вами уже познакомились с типами данных и знаем как классифицируется информация для хранения. Осталось выяснить, как данные записать в оперативную память и как к ним потом обращаться, чтобы использовать или изменить.
</p>
<p>
Итак, меняющиеся данные договоримся называть  ПЕРЕМЕННЫМИ, а постоянные данные – КОНСТАНТАМИ.</p>
<p>
<strong>
Переменная - область оперативной памяти, обладающая собственным именем и предназначеная для хранения данных, которые могут быть изменены.
</strong>
</p>
<p>
<strong>
Константа - область оперативной памяти, обладающая собственным именем и предназначеная для хранения постоянных данных.
</strong>
</p>
<p>
<ul>
Вот пример констант: Всем известное количество дней в неделе и количество месяцев в году… Оно не меняется ни при каких обстоятельствах, - поэтому эти значения- константы. 
</ul>
<ul>
А вот наш возраст – величина переменная. Сегодня кому-то 26 лет, а через год будет 27.
</ul>
</p>

<p>
 Из определений становятся понятно, что для поиска  данных в памяти им дают имена (по аналогии с тем, что вещи в багажном вагоне  снабжают бирочками). В среде программирования их называют идентификаторами. Одна из первых проблем, которую решают родители новорожденного, - это выбор имени для него. Накладывает ли имя отпечаток на характер человека, на его судьбу – вопрос сложный и спорный. Можно услышать совершенно противоположные мнения на этот счет. Но тот факт, что имя (идентификатор), даваемое новой переменной (константе), должно быть интуитивно понятным и объясняющим назначение переменной, не будет оспаривать ни один более-менее опытный программист.
</p>
<p>
Имена данным даются, соблюдая строго определенные правила. Этих правил нарушать нельзя!
</p>

<h3>Правила составления имен.</h3>

<p>
<ul>
В имени допустимо использование только следующих символов:
<ol>
  <li>ПРОПИСНЫЕ и строчные буквы латинского алфавита. При этом не зыбывайте о регистрозависимости языка. Например, Age и age - это два разных имени.</li>
  <li>Цифры. Однако, цифра не может быть использована в качестве первого символа. То есть, Name1 допустимо, 1Name - нет.</li>
  <li>Символ подчеркивания  _. Дело в том, что вы должны помнить, что пробел, тоже является символом и данный символ недопустим в имени переменной. Его заменит знак подчеркивания, который улучшит выразительность имен. Например, сравните:
ageofman и Age_Of_Man.</li>
</ol>
</ul>
</p>
<p>
При определении имени для переменной запомните следующее:
<ol>
  <li>Нельзя называть переменную ключевыми словами языка программирования. Ключевое слово - слово, зарезервированное под синтаксис языка программирования (int, float,double и т. п.). В Visual Studio ключевые слова подсвечиваются синим светом, это как минимум приведет к путанице.</li>
  <li>Нежелательно существование двух идентификаторов с одинаковыми именами.</li>
  <li>Нельзя использовать никакие другие символы, кроме допустимых.(см. выше)</li>
  </ol>
</p>

<h3>Объявление и использование переменных и констант.</h3>

<p>Теперь мы обладаем всей информацией для создания (объявления) переменной. Осталось лишь выяснить, каков общий синтаксис:
<ol>
  <li><strong>тип_данных имя_переменной;</strong> - в данном случае в оперативной памяти будет выделена ячейка размером, соответствующим заданному типу. И этой ячейке будет присвоенно выбранное Вами имя. Что же там будет содержаться? В только что созданную переменную будет записано случайное число, определяемое операционной системой. Это число будет содержаться в памяти до тех пор, пока Вы не заполните переменную другим значением, с помощью специального оператора присваивания =</li>
  <li><strong>тип_данных имя_переменной=значение;</strong> - существует и такая возможность - заполнить переменную значением, прямо при создании. Такой процесс мы будем называть <strong>инициализацией</strong>.</li>
<li><strong>const тип_данных имя_переменной=значение;</strong> - а это объявление константы. Основные моменты состоят в том, что вне зависимости от типа данных перед ним указывается ключевое слово const. Кроме того константа обязательно должна быть проинициализированна при создании. Поменять ее значение впоследствие будет невозможно.</li>
   </ol></p>
<h3>Показ значения переменной на экран.</h3>
<p>Показ значения переменной на экран осуществляется с помощью cout&lt;&lt;
<example>
cout&lt;&lt;имя_переменной; // кавычки в данном случае не указываются
</example>
Можно показывать содержимое нескольких переменных через &lt;&lt;
<example>
cout&lt;&lt;имя_переменной1&lt;&lt;имя_переменной2; // кавычки в данном случае не указываются
</example>
Можно чередовать показ содержимого переменных с текстовыми сообщениями и Escape-последовательностями через &lt;&lt;
<example>
cout&lt;&lt;"Текст"&lt;&lt;имя_переменной1&lt;&lt;"Текст"&lt;&lt;имя_переменной2&lt;&lt;"\n"; 
</example>
Показ содержимого констант осуществляется по полной аналогии с переменными.
</p>
<h3>Практические примеры</h3>
Приведем несколько примеров создания и инициализации переменных и костант для разных типов данных.
<h5>Целочисленные переменные и константы.</h5>

<p>
С целыми числами мы встречаемся повсеместно: возраст, количество стульев, количество комнат, количество дней в неделе и т.д. 
</p>
<p>
Переменные, в которых  будут храниться целые числа, ОБЪЯВЛЯЮТСЯ так:
</p>
<p><b>
	int Age;
</b></p>
<p>
О чем говорит эта строчка? Что в переменной по имени Age (возраст)  будет хранится целое значение. Слово int объявляет ТИП значения переменной по имени Age.
</p>
<p>
Теперь например, мы хотим внести в переменную Age значение 34. Как это сделать?
</p>
<p><b>
Age =34;
</b></p>
<p>
Эта строчка читается так: «Переменной Age присвоить значение 34».
</p>
<p>
Еще раз посмотрим на оператор присваивания: Age =34;
</p>
<p>
Слева от знака равно стоит  имя переменной, которой присваивается значение. А справа стоит то значение, которое присваивается. 
</p>
<p>
Константа, в которой будет хранится целое число объявляется так:
</p>
<p><b>
const int Count_Days_in_Week=7;
</b></p>
<p>
О чем говорит эта строка?  Слово const подчеркивает, что объявляется константа. int сообщает, что константа будет целым числом. Затем следует имя константы Count_Days_in_Week и ее значение 7.
</p>
<p>
Теперь разберем, как вычислять значение переменной. Для чего это нужно? Простой пример: как  посчитать сколько часов в 2000 году? Неужели вы хотите посчитать эту число сами? 
</p>
<p>
 На самом деле, довольно легко заставить компьютер это сделать самостоятельно. От нас требуется написать только формулу этого вычисления.
</p>
<p>
В 2000 году 366 суток, в сутках  24 часа. Значит формула расчета количества часов в 2000 году такова: 366 умножить на 24. 
</p>
<p>
 В языке С в качестве знака умножения используют * (звездочка, комбинация Shift+8).
</p>
<p>
Разработаем программу, которая считает сколько же часов в 2000 году. 
</p>
<p>Перед созданием программы рекомендуется кратко набросать ее алгоритм. 
</p>
<p>Алгоритм - последовательность действий, направленная на решение поставленной задачи. 
</p>

<p>
 Дано:
         количество дней в году - 366. Это значение не будет меняться, поэтому объявим его константой целого типа по имени DayIn_2000Year.
            количество часов в сутках – 24. Тоже не меняется. Объявим ее константой целого типа по имени HourInDay.
В нашей программе будет единственная переменная, в нее мы запишем  результат расчета. Назовем эту переменную HourIn_Year2000. Она будет целого типа. (int) 
</p>
<p>
Алгоритм будет следующий:
<ol>
  <li>Объявление и инициализация переменных и констант.</li>
  <li>Подсчет результата.</li>
  <li>Вывод на экран результата.</li>
  </ol>
</p>
<p>
Имена переменным вы можете придумать сами (не забывайте только о правилах составления имен переменных).
</p>

<p>
А теперь - как всегда, создадим новый проект и введем следующий код:
</p>

<example>
// Заголовок

#include  &lt;iostream&gt;

// определение пространства имен, в котором есть cout&lt;&lt;

using namespace std;

// Главная функция

void main()

{

// вывод пустой строки

cout&lt;&lt;"\n";

//Объявляем целочисленные константы

int DayIn_2000Year=366;

int HourInDay=24;

//объявляем целочисленную переменную 

int  HourIn_Year2000;

// вычисляем искомое значение и 

// помещаем его в переменную HourIn_Year2000

HourIn_Year2000=DayIn_2000Year*HourInDay;

 // выводим значение переменной HourIn_Year2000 на экран

cout&lt;&lt;"\t\t In 2000 year "&lt;&lt; HourIn_Year2000;

cout&lt;&lt;" hours\n ";

}
</example>
<p>
Все! Компилируйте программу!
</p>

<h5>Вещественные переменные и константы.</h5>

<p>Пример объявления и инициализации
<example>
float Weight;
Weight=12.3452;

double weight_atom;
weight_atom= 2.5194е+017;
</example>
</p>

<p>Что обозначает число <strong>2.5194е+017</strong>?
</p><p>
Это краткая запись вещественных чисел. 
Называется она - экспоненциальной формой записи
чисел.
Сообщаем вам секрет расшифровки написанного. 
Этим набором символов описывается число<strong> 251940000000000000</strong> или <strong>2,1594&#215;10<sup>17</sup></strong>.</p>

<p><strong>3.4Е-008</strong> расшифровывается
так: <strong>3,4&#215;10<sup>-8</sup></strong>, что аналогично <strong>3,4:10<sup>8</sup></strong>.</p>

<p><strong>-1.5E+003</strong> расшифровывается как <strong>-1,5&#215;10<sup>3</sup></strong>.</p>
 
<p>Числа с плавающей точкой типа float могут
менятся от <strong>-3,4&#215;10<sup>38</sup></strong>
 до <strong>3,4&#215;10<sup>38</sup></strong>. 
</p><p>
Значения от <strong>–3,4&#215;<sup>-38</sup></strong>
 до <strong>3,4&#215;10<sup>-38</sup></strong>
считаются равными нулю. </p>


<p>А теперь давайте поработаем с вещественными числами на практике:</p>

<p>Напишем программу, которая будет расчитывать стоимость покупки. Пусть
программа использует цену товара (<strong>Cost</strong>),
количество купленного товара (<strong>Count</strong>), и, 
учитывая скидку (<strong>Discount</strong>), вычисляет
стоимость покупки (<strong>Price</strong>).</p>

<p>Создадим новый проект <strong>Pokupka</strong> и введем
текст следующей программы
<example>
// Заголовок
#include  &lt;iostream&gt;

// определение пространства имен, в котором есть cout&lt;&lt;
using namespace std;

// Главная функция
void main()
{
    //Объявляем переменную Discount
	float Discount=0.05;

	//Объявляем переменную Cost
    float Cost=10.50;

    //Объявляем переменную Count
    int Count=5;

    //Объявляем переменную Price
    float Price;

    //Вычисляем значение переменной Price
    Price=Count*Cost-Count*Cost*Discount;
    
	// Выводим итоговую стоимость товара со скидкой
    cout&lt;&lt;"Please, pay:"&lt;&lt;Price&lt;&lt;"\n";
}
</example>
</p>
<p>Компилируйте программу и отправляйте
ее на выполнение. То, что  Вы должны увидеть на экране, приведено ниже.
</p>
<center>
<img alt="Изображение: Результат выполнения программы." src="images\Result.gif"  /></center>

<h5>Символьные и логические переменные и константы.</h5>
<p>В данном уроке мы не будем приводить примеры использования символьных и логических переменных и констант. Их предназначение более подробно будет описано в будущем. Оговорим лишь объявление и инициализацию.
<example>
// Логическая переменная
bool Flag;
Flag=true;

// Один символ всегда указывается в одинарных кавычках
char Symbol='A'; 

/* Escape - последовательность рассматривается компилятором, как один символ
     и соответственно может быть записана в переменную или константу
     типа char*/
const char NewLine='\n'; 

cout&lt;&lt;NewLine// показывает пустую строку
</example>
</p>							   

</lesson>
