<?xml version="1.0" encoding="windows-1251" ?>
<?xml:stylesheet type="text/xsl" href="common/layout.xsl" ?>

<lesson title="Урок №1" next="section05.xml" prev="section03.xml" summ="1">
<h2>Вывод данных</h2>

<p>
Вы уже знаете, что с помощью команды cout&lt;&lt; мы можем выводить на экран  различные текстовые строки. 
</p>

<p>
Однако, чтобы компилятор понял такую команду, Вы должны помнить о следующих трех основных моментах:
</p>

<ol>
  <li>В заголовке программы должна присутствовать строка #include  &lt;iostream&gt;</li>
  <li>Перед использованием команды необходимо подключить пространство имен, к которому принадлежит команда cout.
	<example>using namespace std;</example></li>
  <li>Строку, которую мы хотим вывести на экран используя cout&lt;&lt;, мы обязательно записываем в кавычки. Например:
	<example>cout&lt;&lt;”здесь пишем то, что хотим”;</example>
  </li>
</ol>


<p>
Команда  cout&lt;&lt; не только выводит на экран строки, но и позволяет их оформлять.  Для оформления вывода строки используют специальные управляющие символы, представляющие собой комбинацию символа \ и символа, определяющего действие, которое необходимо произвести над строкой. Эти управляющие символы называются Escape-последовательностями. Ниже приводятся некоторые из них:
</p>


<example>
\b	Удаление последнего выведенного символа
\n	Перейти на начало новой строки 
\t	Перейти к следующей позиции табуляции 
\\	Вывести обратную черту \ 
\"	Вывести двойную кавычку “ 
\'	Вывести одинарную кавычку '
</example>

<p>
Существование последних трех Escape-последовательностей сначала всегда вызывает легкое недоумение. Зачем пользоваться  управляющими символами, если можно просто написать: " или \ или ' ? Ответ лежит на поверхности, все эти три символа являются операторами и, если их "просто написать", то компилятор и будет воспринимать их как операторы. Например, когда слово используется в переносном смысле, оно заключается в кавычки. Предположим, Вам необходимо вывести следующий текст на экран:
	<example>The Man in red was "old friend" of John...</example>
Если Вы не используете  Escape-последовательности, то очевидно, что Ваша команда будет выглядеть так:
	 <example>cout&lt;&lt;”The Man in red was "old friend" of John...”;</example>
И это приведет к неминуемой ошибке. Компилятор воспримет только часть строки, а именно cout&lt;&lt;”The Man in red was ". Двойную кавычку после was он посчитает закрывающей, а всё остальное примет, как неверный синтаксис языка. Такая программа, естественно, не запустится на выполнение. Правильный вариант таков:
	<example>cout&lt;&lt;”The Man in red was \"old friend\" of John...”;</example>
</p>

<p>Теперь, давайте поговорим о том, где именно в cout&lt;&lt; можно указывать Escape-последовательности. Самое главное, что Вам необходимо знать, это - что Escape-последовательность всегда должна находиться внутри кавычек, т. к. является текстом, а дальше Ваши возможности практически не ограничены. Например, так:    
</p>

<p>
cout&lt;&lt;” My name is”&lt;&lt;” - Ira\n ”;
</p>

<p>
cout&lt;&lt;”I'm from Odessa\n ”;
</p>

<p>
cout&lt;&lt;”My eyes is blue"&lt;&lt;"\n ”&lt;&lt;"That`s all!!!";
</p>

<p>
В результате работы этой команды мы увидим на экране
</p>

<example>
My name is - Ira
I'm from Odessa
My eyes is blue
That`s all!!!
</example>

<h3>Практический пример использования cout&lt;&lt;</h3>
<p>
Напишем программу, которая выводит на экран краткую справку об изученных нами Escape-последовательностях. Вот, что мы хотим увидеть на экране:
</p>

<example>
\b	Backspace
\n	New line
\t	Horizontal tab
\\	Backslash \
\"	Double quotation mark "
\'	Single quotation mark '
</example>

<p>
Запускаем среду   Visual Studio.NET. Создаем новый проект под именем EscapeSequences.             
Набираем код, который располагается ниже.
</p>


<example>
// Заголовок

#include &lt;iostream&gt;

// определение пространства имен, в котором есть cout&lt;&lt;

using namespace std;

// Главная функция

void main()

{

/* Следующая команда через 4 табуляции выводит текст 
   Escape Sequences
   и переводит вывод на следующую строку */

     	cout&lt;&lt;"\t\t\t\tEscape Sequences\n";

// Выводит пустую строчку

     	cout&lt;&lt;"\n";

/* Через 2 табуляции выводит текст \b, 
   и еще через 1 табуляцию Backspace
   Затем \n переводит вывод на следующую строку */

	cout&lt;&lt;"\t\t\\b"&lt;&lt;"\tBackspace\n";

// Выводит пустую строку

     	cout&lt;&lt;"\n";

/* Через 2 табуляции выводит текст \n, 
   и еще через 1 табуляцию New line
   Затем \n переводит вывод на следующую строку */

	cout&lt;&lt;"\t\t\\n"&lt;&lt;"\tNew line\n";

// Выводит пустую строку

     	cout&lt;&lt;"\n";

/* Через 2 табуляции выводит текст \t, 
   и еще через 1 табуляцию Horizontal tab
   Затем \n переводит вывод на следующую строку */

	cout&lt;&lt;"\t\t\\t"&lt;&lt;"\tHorizontal tab\n";

// Выводит пустую строку

     	cout&lt;&lt;"\n";

/* Через 2 табуляции выводит текст \\, 
   и еще через 1 табуляцию Backslash \
   Затем \n переводит вывод на следующую строку */

	cout&lt;&lt;"\t\t\\\\"&lt;&lt;"\tBackslash \\\n";

// Выводит пустую строку

     	cout&lt;&lt;"\n";

/* Через 2 табуляции выводит текст \t, 
   и еще через 1 табуляцию Double quotation mark "
   Затем \n переводит вывод на следующую строку */

	cout&lt;&lt;"\t\t\""&lt;&lt;"\tDouble quotation mark \"\n";

// Выводит пустую строку

     	cout&lt;&lt;"\n";

/* Через 2 табуляции выводит текст \', 
   и еще через 1 табуляцию Single quotation mark '
   Затем \n переводит вывод на следующую строку */

	cout&lt;&lt;"\t\t\'"&lt;&lt;"\tSingle quotation mark \'\n";

// Выводит пустую строку

     	cout&lt;&lt;"\n";

}
</example>


<p>
Откомпилируем программу (Build -> Rebuild Solution). Если возникло много ошибок, то вспомните следующие правила:

<ul>
        Если в программе будут выводиться сообщения на экран, то в начало программы  записывается строчка #include &lt;iostream&gt; и подключается пространство имен, к которому принадлежит команда cout (using namespace std;) 
</ul>
<ul>
        Каждая программа должна  содержать функцию с именем main (). Работа программы начинается с выполнения этой функции.
</ul>
<ul>
        Команды функции main() находятся внутри фигурных скобок {     } 
</ul>
<ul>
        Все команды обязательно должны заканчиваться символом точка с запятой.
</ul>

И запустим ее (Debug -> Start Without Debugging). 
</p>

<h3>P. S.</h3>

<p>Вы должно быть обратили внимание на то, что мы употребляем лишь латинские символы при выводе на экран данных. Это связано с тем, что программу мы с Вами писали в ОС Windows, а выполнение ее осуществляется в MS DOS. Дело в том, что каждый символ имеет в любой операционной системе свой числовой код. И система идентифицирует его именно по этому коду. Символьные кода кириллицы в MS DOS  и Windows не совпадают, поэтому программа с использованием киррилицы будет работать не корректно. Например, написали мы в Windows:

<example>
	cout&lt;&lt;"Утро"; 
</example>
А на экран выводиться:
<example>
	µЄЁю	
</example>
Это легко объяснить тем, что в Windows, например, буква о - 238, а в DOS этому коду соответствует буква ю. Кода же латиницы совпадают в обеих ОС. В последствии мы с Вами научимся исправлять эту ситуацию.
</p>
</lesson>