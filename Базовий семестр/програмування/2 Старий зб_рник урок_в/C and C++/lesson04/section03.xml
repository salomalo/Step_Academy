<?xml version="1.0" encoding="windows-1251" ?>
<?xml:stylesheet type="text/xsl" href="common/layout.xsl" ?>

<lesson title="Урок №4" next="section04.xml" prev="section01.xml" summ="0">
<h2>Ключевые слова break и continue.</h2>
<h3>Оператор break</h3>
<p>Нередко при работе с циклами, возникает необходимость искусственно прервать выполнение цикла. Для этого используется, уже знакомый вам (по изучению switch), оператор break. Этот оператор должен находиться в теле цикла, в том месте где необходимо сделать остановку. Например, именно с помощью этого оператора, мы можем решить проблему вечного цикла, в ситуации, когда условие в цикле for не указывается.
Рассмотрим пример:</p>
<example>
#include &lt;iostream&gt;
using namespace std;
void main()
{
	for(int x=1;;x++)
	{
		if(x==4) break;// если x стал равен 4 - остановить цикл
		cout&lt;&lt;x;
		
	}
	cout&lt;&lt;"Bye!";
}
</example>
<h5>Комментарии к примеру.</h5>
<p>1. Согласно правилу, условие цикла всегда истинно, так как его просто нет.</p>
<p>2. При значениях 1,2 и 3 переменной x условие оператора if выполняться не будет. break, естесственно не сработает, так как находится в теле if. Между тем, на экран последовательно будут выводиться числа 1,2,3.</p>
<p>3. Когда х станет равно 4, программа попадет в тело if и выполнится break. Цикл сразу же будет остановлен, а выполнение программы перейдет на следующую строчку за закрывающейся фигурной скобкой оператора for.</p>
<p>4. На экране появится надпись Bye!</p>
<p>5. Цифра 4 на экране никогда не появится, так как, если сработал break, все что находится в цикле ниже него уже не выполнится.</p>

<tip start="Примечание">break может быть использован либо в цикле, либо в операторе switch. Любое другое размещение приводит к ошибке на этапе компиляции.</tip>
<h3>Оператор continue</h3>

<p>Оператор continue используется для прерывания текущей итерации цикла и осуществления перехода на следующий шаг. В ряде случаев, такие действия являются необходимыми. Если выполняется оператор continue, то в зависимости от вида цикла происходит следующее:</p>
<p>Циклы while и do while останавливают выполнение шага и переходят к проверке условия.</p>
<p>Цикл for также останавливает выполнение шага. Но, сначала переходит к изменению управляющей переменной, а потом уже к проверке условия.</p>
<p>Рассмотрим пример: <i>показать на экран все нечетные целые числа, в диапазоне от нуля до 25 включительно.</i></p>
<example>
#include &lt;iostream&gt;
using namespace std;
void main()
{
	for(int i=0;i&lt;26;i++)

	{		
		if(i%2==0)// если число делится на два без остатка
		{
			continue;// остановить итерацию цикла и перейти к i++
		}
		cout&lt;&lt;i&lt;&lt;"\n";
	
	}
}
</example>
<h5>Комментарии к примеру.</h5>
<p>1. Цикл начинает свое движение с нуля и проходит итерации до 25 включительно.</p>
<p>2. Внутри цикла предусмотренно условие: если число i - четное, нужно остановить текущий шаг цикла (<b>continue;</b>)и перейти к конструкции <b>i++</b>.</p>
<p>3. То, что располагается ниже сработавшего оператора continue на текущем шаге уже не выполнится.</p>
<p>4. Если условие if не выполняется, значит число i нечетное, if будет проигнорирован, а число - отображено на экран.</p>
<hr/>
<p>Теперь, когда мы познакомились с теоретическими материалами урока, давайте перейдем к следующему разделу, где будет рассмотренно несколько практических задач.</p>
</lesson>