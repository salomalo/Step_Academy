<?xml version="1.0" encoding="windows-1251" ?>
<?xml:stylesheet type="text/xsl" href="common/layout.xsl" ?>

<lesson title="Урок №4" next="section03.xml" prev="index.xml" summ="1">
<h2>Конструкция for.</h2>
<p>В прошлом уроке мы с вами познакомились с таким понятием как цикл и рассмотрели некоторые из конструкций, представляющих циклы в языке С. А, именно - while и do while. Сейчас мы рассмотрим еще одну разновидность цикла – оператор for. Данный оператор теоретически является полной аналогией while, а практически позволяет организовать цикл с более удобным управлением.</p>

<h3>Общий синтаксис и принцип работы конструкции for</h3>
<example>for(инициализация переменной;проверка условия;изменение переменной)
{
	действие;
}
</example>
<p>Принцип выполнения цикла:</p>
<example>
<p>1. Инициализация  переменной.</p>
<p>2. Проверка условия .</p>
<p>3. Выполнение действия, если условие истинно.</p>
<p>4. Если условие ложно, выполнение следующего за циклом оператора.</p>
<p>5. Если условие было истинно  - изменение управляющей переменной.</p>
<p>6. Проверка условия. Далее снова пункт 3 или 4.</p>
</example>
<p>Схема</p>
<center><img src="images\1.jpg" ></img></center>
<h3>Пример использования.</h3>
<p>Рассмотрим простой уже знакомый пример: с помощью цикла показать на экран цифры от 1 до 5 включительно. Только сделаем это с помощью оператора for.</p>
<example>#include &lt;iostream&gt;
using namespace std;

void main()
{
	for(int i=1;i&lt;=5;i++)
	{
		cout&lt;&lt;i;
	}
}
</example>
<h5>Комментарий к примеру.</h5>
<p>1. Внутри цикла объявляется переменная i равная 1. Это и будет управляющая переменная.</p>
<p>2. Затем, осуществляется проверка значения  этой переменной с помощью условия <b>i&lt;=5;</b></p>
<p>3. Если условие истинно (а так будет, пока i не достигнет значения 6) выполняется показ значения i на экран <b>(cout&lt;&lt;i;)</b> и изменение управляющей переменной i на 1 <b>(i++)</b>. Затем, снова проверяется условие.</p>
<p>2. Если условие ложно (то есть  значение i стало равно 6), то программа переходит на следующую строчку за закрывающейся фигурной скобкой цикла.</p>
<tip start="Примечание"> Обратите внимания, что первый шаг - СОЗДАНИЕ И ИНИЦИАЛИЗАЦИЯ ПЕРЕМЕННОЙ - всегда выпоняется только один раз.</tip>
<h3>Некоторые особенности синтаксиса for.</h3>
<p>Несмотря на простоту работы оператора, он обладает некоторыми особенностями форм записи.</p>
<h5>Инициализация управляющей переменной.</h5>
<p>1. Инициализация  и создание переменной производится в цикле.</p>
<example>

	for(int x=1;x&lt;=100;x++)
	{
		cout&lt;&lt;x;
	}

</example>
<p>2. Cоздание переменной производится до цикла, а инициализация в цикле.</p>
<example>

	int x;
	for(x=1;x&lt;=100;x++)
	{
		cout&lt;&lt;x;
	}

</example>

<p>3. Инициализация  и создание переменной производятся до цикла.</p>
<example>

	int x=1;
	for(;x&lt;=100;x++)
	{
		cout&lt;&lt;x;
	}

</example>
<p>Все три примера являются абсолютно функционирующими и равновесными.</p>
<h5>Изменение управляющей переменной.</h5>
<p>Изменение управляющей переменной можно перенести внутрь тела цикла, как это происходит в while и do while.</p>
<example>

	for(int x=1;x&lt;=100;)
	{
		cout&lt;&lt;x;
		x++;
	}

</example>
<h5>Условие.</h5>
<p>Условие конструкции также можно пропустить, однако в этом случае оно будет считаться по умолчанию истинным. Таким образом, мы получаем <i>постоянно истинное условие</i> и, как следствие - ВЕЧНЫЙ ЦИКЛ.</p>
<example>

	for(int x=1;;x++)
	{
		cout&lt;&lt;x;
		
	}

</example>
<tip start="Примечание"> Если хотите узнать, как пропустить условие и избежать вечного цикла - читайте следующий раздел урока.</tip>
<p>Исходя из вышеописанного, мы можем сделать следующий вывод: <b>Ни одна из частей цикла for не является обязательной.</b> </p>
<p>Как видите, работа for проста и аналогична работе while. Что выбрать?! Это зависит от поставленной задачи и от вашего решения.</p>
</lesson>
