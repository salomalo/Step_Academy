<?xml version="1.0" encoding="windows-1251" ?>
<?xml:stylesheet type="text/xsl" href="common/layout.xsl" ?>

<lesson title="Урок №5" next="hometask.xml" prev="section2.xml" summ="0">
<h2>Использование интегрированного отладчика Microsoft Visual Studio.</h2>
<h3>Понятие отладки. Необходимость использования отладчика.</h3> 
<p>Как вы уже знаете - существует два вида ошибок программы.</p>
<p><b>Ошибка на этапе компиляции - ошибка синтаксиса языка программирования. Такие ошибки или опечатки контролируются компилятором. Программа, содержащая такую ошибку просто не запустится на выполнение и компилятор укажет в какой строке кода произошла ошибка.</b></p>
<p><b>Ошибка на этапе выполнения - ошибка, приводящая к некорректной работе программы, либо к полной остановке последней. При этом следует учитывать, что такая ошибка компилятором не контролируется. Лишь в редких случаях компилятор может выдать предупреждение о какой-то некорректной инструкции, но в общем и целом в таких ситуациях программисту приходится выпутываться самому.</b></p>
<p>Именно об ошибках на этапе выполнения и пойдет речь. Зачастую, чтобы обнаружить подобную ошибку необходимо пройти некий фрагмент программы по шагам, так как если бы программа выполнялась. Безусловно при этом желательно четко просчитать какое значение в определенный момент времени находится в конкретных переменных. Можно конечно же произвести такой подсчет на листе бумаги построчно анализируя программу,  однако в среде разработки Visual Stidio есть специальное средство для организации анализа программы - отладчик. Данный раздел урока посвящен основам работы с отладчиком.</p>
<h3>Выполнение программы по шагам.</h3>
<p>Предположим, что мы собираемся проанализировать следующий код:</p>
<center><img src="images\d1.jpg" ></img></center>
<br/>
<p>Для начала создайте проект и наберите этот код. Скомпилируйте его и убедитесь, что нет синтаксических ошибок. Теперь приступим. Нажмите на клавиатуре функциональную клавишу F10. Рядом с первой выполняемой строкой кода у вас на экране появится желтая стрелка.</p>
<center><img src="images\d2.jpg" ></img></center>
<p>Именно эта стрелка указывает, какая строка кода сейчас "выполняется". Для передвижения на следующий шаг программы снова нажмите F10. И вы попадете в следующую строку:</p>
<center><img src="images\d3.jpg" ></img></center>
<p>Обратите внимание на то, что внизу экрана у вас располагается набор вкладок для анализа переменных:</p>
<center><img src="images\d4.jpg" ></img></center>
<p>Autos - эта вкладка предназначена для просмотра значений переменных, которые существуют в момент выполнения текущей строки кода. Вписать на данной вкладке что-то от себя нельзя - это автоматическая функция.</p>
<center><img src="images\d5.jpg" ></img></center>
<p>Watch - предназначенна, как раз для тех случаев, когда необходимо самому выбрать переменную для просмотра. Вы просто вписываете в поле Name название переменной и она отображается независимо от выполняемого кода.</p>
<p>Теперь просто нажимая F10, "пройдитесь" по коду и посмотрите, как будут изменяться данные во вкладках.</p>
<tip start="Примечание">Если вы хотите остановить отладчик раньше, чем завершиться анализ кода нажмите сочетание клавиш Shift+F5</tip>
<tip start="Примечание">Вы, наверное, заметили, что отладчик начинает анализ с первой строки программы. Если вы хотите запустить работу отладчика с определенной строки программы - установите курсор в необходимую строку и нажмите сочетание клавиш Сtrl+F10</tip>
<h3>Точка останова.</h3>
<p>Рассмотрим ситуацию, когда нам необходимо выполнить отрезок кода и остановившись в определенном месте, запустить отладчик. Для этого используется так называемая - точка останова.</p>
<p>Наберите следующий код - установите курсор в строку cout&lt;&lt;i; и нажмите клавишу F9. Рядом со строкой появилась красная точка это и есть точка останова.</p>
<center><img src="images\d6.jpg" ></img></center>
<p>Теперь нажмите F5, программа запустится, выполнится до того момента, где установлена точка останова и перейдет в режим отладчика.</p>
<center><img src="images\d7.jpg" ></img></center>
<p>Обратите внимание на состояние консоли (окна программы). Здесь отображается все, что успело произойти:</p>
<center><img src="images\d8.jpg" ></img></center>
<p>Далее следует обычная работа отладчика. Перемещайте желтую стрелку с помощью F10 и следите, что происходит с переменными. Кроме того, заглядывайте в окно консоли, все изменения происходящие в коде будут отображаться и там.</p>
<h3>"Умная" точка останова.</h3>
<p>Только что мы запустили анализ программы с определенного места. Однако, заметим, что отладчик сработал сразу, как только началось выполнение тела цикла, т. е. на  первой итерации. Это неудобно, в случае, если итераций большое количество, и несколько из них вам надо пропустить. Другими словами - вы хотите начать анализ, например, с 5 итерации цикла. Решить проблему просто - сделать точку останова "умной".</p>
<p>Для этого на самой точке щелкаете правой кнопкой мыши и в открывшемся меню выбираете Breakpoint Properties.</p>
<center><img src="images\d9.jpg" ></img></center>
<p>Перед вами появилось окошко. File, Line и Character - это файл, строка и позиция в которой установлена точка останова. Нас интересует кнопка Condition, рядом с которой написано - (no condition). Нажимаем её.</p>
<center><img src="images\d10.jpg" ></img></center>
<p>Появилось окно, в котором нам необходимо вписать условие при котором запустится отладчик. Наше условие i==5. Выбираем is true - то есть остановиться, когда условие станет истинным. Нажимаем ОК.</p>
<center><img src="images\d11.jpg" ></img></center>
<p>Теперь рядом с кнопкой другая надпись. В главном окне также нажимаем ОК.</p>
<center><img src="images\d12.jpg" ></img></center>
<p>Когда все готово, нажимаем F5 и смотрим, что произойдет. Как видите, все удачно - отладчик запустился в нужный нам момент.</p>
<center><img src="images\d13.jpg" ></img></center>
<br/>
<tip start="Примечание">Снять точку останова можно простым нажатием F9, в той строке, где точка располагается.</tip>
<hr/>
<p>Сегодня мы рассказали не обо всех возможностях отладчика. Мы еще затронем эту тему в будущем при изучении функций. А, сейчас, настоятельно рекомендуем вам - потренироваться работе с отладчиком, например, на всех примерах урока и на своем домашнем задании. Удачи!!!</p>
</lesson>