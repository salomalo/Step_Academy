<?xml version="1.0" encoding="windows-1251" ?>
<?xml:stylesheet type="text/xsl" href="common/layout.xsl" ?>

<lesson title="Урок №5" next="section3.xml" prev="section1.xml" summ="0">	  

<h2>Практические примеры. </h2>
<h3>Пример 1.</h3>
<h5>Постановка задачи.</h5>
<p>
Написать программу, которая выводит на экран таблицу умножения.
</p>
<h5>Код реализации.</h5>
<example>
#include &lt;iostream&gt;
using namespace std;
void main ()
{
	for(int i=1;i&lt;10;i++)
	{
		for(int j=1;j&lt;10;j++)
		{
			cout&lt;&lt;i*j&lt;&lt;"\t";
		}
		cout&lt;&lt;"\n\n";
	}
}
</example>

<h5>Комментарий к коду.</h5>
<p>1. Управляющие переменные внешнего и внутреннего циклов осуществляют функции множителей.</p>
<p>2. Управляющая переменная i создается и инициализируется значением 1.</p>
<p>3. Программа проверяет условие i&lt;10, так как 1 меньше 10 условие является истинным и программа входит во внешний цикл.</p>
<p>4. Управляющая переменная j создается и инициализируется значением 1.</p>
<p>5. Программа проверяет условие j&lt;10, так как 1 меньше 10 условие является истинным и программа входит во внутренний цикл.</p>
<p>6. Осуществляется показ на экран произведения i на j - <b><i>1</i></b></p>
<p>7. Осуществляется изменение управляющей переменной j.</p>
<p>8. Снова проверяется условие j&lt;10, так как 2 меньше 10 условие является истинным и программа снова входит во внутренний цикл.</p>
<p>6. Осуществляется показ на экран произведения i на j - <b><i>2</i></b></p>
<p>7. Осуществляется изменение управляющей переменной j.</p>
<p>. . .</p>
<p> Действия с 5 по 7 повторяются до тех пор пока j не становится равно 10, при этом текущее значение i (1) умножается на каждое значение j (от 1 до 9 включительно), результат показывается на экран. Получается строка таблицы умножения на 1.</p>
<p> Затем программа выходит из внутреннего цикла и переводит экранный курсор на две строки вниз. После этого, осуществляется увеличение переменной i на единицу и снова вход во внутренний цикл. Теперь уже для вывода цепочки умножения на 2.</p>
<p>Таким образом, в конце концов на экране появляется вся таблица умножения.</p>
<center><img src="images\3.jpg" ></img></center>
<h3>Пример 2.</h3>
<h5>Постановка задачи.</h5>
<p>
Вывести на экран прямоугольник из символов 20 на 20.
</p>
<h5>Код реализации.</h5>
<example>
#include &lt;iostream&gt;
using namespace std;
void main(){
	int str;
	int star_count;
	int length=20;
	str=1;
	while(str&lt;=length)
	{
		star_count=1;
		while(star_count&lt;=length)
		{
			cout&lt;&lt;"*";
			star_count++;
		}
		cout&lt;&lt;"\n";
		str++;
	}
	
}
</example>
<h5>Комментарий к коду.</h5>
<p>1. Управляющая переменная внешнего цикла - str контролирует количество строк в прямоугольнике.</p>
<p>2. Управляющая переменная внутреннего цикла - star_count контролирует количество символов в каждой строке.</p>
<p>3. length - длина стороны прямоугольника</p>
<p>4. После отрисовки каждой строки, во внешнем цикле осуществляется переход на следующую строчку прямоугольника.</p>
<p>4. Результат таков:</p>
<center><img src="images\4.jpg" ></img></center>
<tip start="Примечание"> Обратите внимания, что несмотря на то, что количество строк соответствует количеству символов в строке - на экране не квадрат!!! Это связано с тем, что высота и ширина символа разные.</tip>
<hr/>
Вот и всё!!! Теперь у вас имеется полная информация о циклах, их разновидностях и принципах работы. Но, прежде чем  выполнять домашнее задание, следует ознакомиться с еще одним разделом урока. Этот раздел поможет вам не только писать программы, но и анализировать их работу.  
</lesson>
