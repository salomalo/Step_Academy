<?xml version="1.0" encoding="windows-1251" ?>
<?xml:stylesheet type="text/xsl" href="common/layout.xsl" ?>

<lesson title="Урок №2" next="runtest.xml" prev="section07.xml" summ="1">
<h2>Структура множественного выбора switch. </h2>
<p>Мы уже знакомы с конструкцией, анализирующей условия - конструкцией if, а также с тернарным оператором. Еще один оператор выбора - оператор switch. Представьте, что необходимо написать программу, в которой используется меню, состоящее из пяти пунктов. Например, маленькое приложение для малышей, умеющее складывать, вычитать и т. п. Можно реализовать обработку выбора с помощью лесенки if else if, вот так:</p>

<example>
# include &lt;iostream&gt;
using namespace std;
void main(){
	
	// объявление переменных и ввод значения с клавиатуры
	float A,B,RES;
	cout&lt;&lt;"Enter first digit:\n";
	cin&gt;&gt;A;
	cout&lt;&lt;"Enter second digit:\n";
	cin&gt;&gt;B;

	// реализация программного меню
	char key;
	cout&lt;&lt;"\nSelect operator:\n";
	cout&lt;&lt;"\n + - if you want to see SUM.\n";
	cout&lt;&lt;"\n - - if you want to see DIFFERENCE.\n";
	cout&lt;&lt;"\n * - if you want to see PRODUCT.\n";
	cout&lt;&lt;"\n / - if you want to see QUOTIENT.\n";

	//ожидание выбора пользователя
	cin&gt;&gt;key;

	if(key=='+') { // если пользователь выбрал сложение		
		RES=A+B;
		cout&lt;&lt;"\nAnswer: "&lt;&lt;RES&lt;&lt;"\n";
	}
	else if(key=='-'){ // если пользователь выбрал вычитание
		RES=A-B;
		cout&lt;&lt;"\nAnswer: "&lt;&lt;RES&lt;&lt;"\n";
	}
	else if(key=='*'){ // если пользователь выбрал умножение
		RES=A*B;
		cout&lt;&lt;"\nAnswer: "&lt;&lt;RES&lt;&lt;"\n";
	}
	else if(key=='/'){ // если пользователь выбрал деление
		if(B){ // если делитель не равен нулю
			RES=A/B;
			cout&lt;&lt;"\nAnswer: "&lt;&lt;RES&lt;&lt;"\n";
		}
		else{ // если делитель равен нулю
			cout&lt;&lt;"\nError!!! Divide by null!!!!\n";
		}
	}
	else{ // если введенный символ некорректен
		cout&lt;&lt;"\nError!!! This operator isn't correct\n";
	}
}
</example>

<p>Вышеописанный пример вполне корректен, но несколько громоздко выглядит. Данный код можно значительно упростить. именно для этого используется switch. Он позволяет сравнить значение переменной с целом рядом значений и, встретив совпадение, выполнить определенное действие. </p>
<h3>Общий синтаксис и принцип действия.</h3>
<p>Для начала рассмотрим общий синтаксис оператора:</p>
<example>
switch(выражение){
case значение1:
	действие1;
	break;
case значение2:
	действие2;
	break;
case значение3:
	действие3;
	break;
......
default:
	действие_по_умолчанию;
	break;
}
</example>
<p>Давайте проанализируем данную форму записи:</p>
<p>1. Выражение - те данные, которые необходимо проверить на соответствие. Здесь может указываться переменная (но только типа char или целочисленная), либо выражение, результатом которого являются целочисленные данные.</p>
<p>2. case Значение1, case значение2, case значение3 - Целочисленные или символьные постоянные значения с которыми сверяется выражение.</p>
<p>3. Действие1, действие2, действие3 - Действия, которые должны выполниться, если значение выражения совпало со значением case.</p>
<p>4. Если произошло совпадение и благополучно выполнилось действие связанное с совпавшим case, switсh заканчивает свою работу и программа переходит на следующую строку за закрывающейся фигурной скобкой оператора switch. За данную функцию отвечает оператор break именно он останавливает выполнение switch.</p>
<p>5. Если в ходе анализа совпадений не произошло срабатывает секция default и выполняется действие_по_умолчанию. Оператор default является аналогом оператора else.</p>
<p>Исходя из вышеописанных утверждений схема работы оператора switch выглядит так:</p>
<center><img src="images\1.jpg"/></center>
<br/>
Теперь давайте посмотрим, каким образом можно упростить приведенный в начале темы пример.
<h3>Оптимизация примера.</h3>
<example>
# include &lt;iostream&gt;
using namespace std;
void main(){
	
	// объявление переменных и ввод значения с клавиатуры
	float A,B,RES;
	cout&lt;&lt;"Enter first digit:\n";
	cin&gt;&gt;A;
	cout&lt;&lt;"Enter second digit:\n";
	cin&gt;&gt;B;

	// реализация программного меню
	char key;
	cout&lt;&lt;"\nSelect operator:\n";
	cout&lt;&lt;"\n + - if you want to see SUM.\n";
	cout&lt;&lt;"\n - - if you want to see DIFFERENCE.\n";
	cout&lt;&lt;"\n * - if you want to see PRODUCT.\n";
	cout&lt;&lt;"\n / - if you want to see QUOTIENT.\n";

	//ожидание выбора пользователя
	cin&gt;&gt;key;
	
	//проверяется значение переменной key
	switch(key){
	case  '+':    // если пользователь выбрал сложение		
		RES=A+B;
		cout&lt;&lt;"\nAnswer: "&lt;&lt;RES&lt;&lt;"\n";
		break; // остановка switch
	case  '-':     // если пользователь выбрал вычитание
		RES=A-B;
		cout&lt;&lt;"\nAnswer: "&lt;&lt;RES&lt;&lt;"\n";
		break; // остановка switch
	case  '*':    // если пользователь выбрал умножение
		RES=A*B;
		cout&lt;&lt;"\nAnswer: "&lt;&lt;RES&lt;&lt;"\n";
		break; // остановка switch
	case  '/':    // если пользователь выбрал деление
		if(B){ // если делитель не равен нулю
			RES=A-B;
			cout&lt;&lt;"\nAnswer: "&lt;&lt;RES&lt;&lt;"\n";
		}
		else{ // если делитель равен нулю
			cout&lt;&lt;"\nError!!! Divide by null!!!!\n";
		}
		break; // остановка switch
	default:    // если введенный символ некорректен
		cout&lt;&lt;"\nError!!! This operator isn't correct\n";
		break; // остановка switch
	}
}
</example>
<p>Как видите, код теперь выглядит гораздо проще и его удобнее читать.</p>
<p>Оператор switch достаточно прост в обращении, однако необходимо знать некоторые особенности его работы:</p>
<p>1. Если в case используются символьные значения, они должны указываться в одинарных кавычках, если целочисленные, то без кавычек.</p>
<p>2. Оператор default может располагаться в любом месте системы switch, выполняться он все равно будет в том случае, если нет ни одного совпадения. Однако правилом "хорошего тона" является указывать default  в конце всей конструкции.</p>
<example>
switch(выражение){
case значение1:
	действие1;
	break;
case значение2:
	действие2;
	break;
default:
	действие_по_умолчанию;
	break;
case значение3:
	действие3;
	break;
}
</example>
<p>3. После самого последнего оператора в списке (будь то case или default) оператор break можно не указывать.</p>
<center><table width="100%">
<tr>
<td>
<example>
switch(выражение){
case значение1:
	действие1;
	break;
case значение2:
	действие2;
	break;
default:
	действие_по_умолчанию;
	break;
case значение3:
	действие3;
}
</example>
</td>
<td>
<example>
switch(выражение){
case значение1:
	действие1;
	break;
case значение2:
	действие2;
	break;
case значение3:
	действие3;
	break;
default:
	действие_по_умолчанию;
}
</example>
</td>
</tr>
</table></center>
<p>4. Оператор default можно вообще не указывать, в случае, если не найдется совпадений, просто ничего не произойдет.</p>
<example>
switch(выражение){
case значение1:
	действие1;
	break;
case значение2:
	действие2;
	break;
case значение3:
	действие3;
	break;
}
</example>
<p>5. В случае, если необходимо выполнять один и тот же набор действий для разных значений проверяемого выражения, можно записывать несколько меток подряд. Рассмотрим пример программы, которая переводит систему буквенных оценок в цифровые.</p>
<example>
# include &lt;iostream&gt;
using namespace std;
void main(){
	// объявление переменной, для хранения буквенной оценки
	char cRate;

	// просьба ввести буквенную оценку
	cout&lt;&lt;"Input your char-rate\n";
	cin&gt;&gt;cRate;

	//анализ введенного значения
	switch (cRate) {
	case 'A':
	case 'a':
		// оценка A или a равноценна 5
		cout&lt;&lt;"Your rate is 5\n";
		break;
	case 'B':
	case 'b':
		// оценка B или b равноценна 4
		cout&lt;&lt;"Your rate is 4\n";
		break;
	case 'C':
	case 'c':
		// оценка C или c равноценна 3
		cout&lt;&lt;"Your rate is 3\n";
		break;
	case 'D':
	case 'd':
		// оценка D или d равноценна 2
		cout&lt;&lt;"Your rate is 2\n";
		break;
	default:
		// остальные символы некорректны
		cout&lt;&lt;"This rate isn't correct\n";
	}
}
</example>
<p>Пример примечателен тем, что с помощью идущих подряд case достигается регистронезависимость. То есть, неважно, какую именно букву введет пользователь - заглавную или строчную.</p>
<h3>Распространенная ошибка.</h3>
<p>Всё самое главное об операторе switch сказано, осталось лишь получить информацию о том, с какой проблемой может столкнуться программист, используя данный оператор.</p>
<p><b>Если случайно пропустить break в любом блоке case, кроме последнего, и этот блок в последствии отработает, то выполнение switch не остановиться. Тот блок оператора case, который будет идти вслед за уже выполнившимся, так же выполниться без проверки.</b></p>
<h5>Пример ошибки.</h5>
<example>
# include &lt;iostream&gt;
using namespace std;
void main(){
	
	// реализация программного меню
	int action;
	cout&lt;&lt;"\nSelect action:\n";
	cout&lt;&lt;"\n 1 - if you want to see course of dollar.\n";
	cout&lt;&lt;"\n 2 - if you want to see course of euro.\n";
	cout&lt;&lt;"\n 3 - if you want to see course of rub.\n";
	
	//ожидание выбора пользователя
	cin&gt;&gt;action;
	
	//проверяется значение переменной action
	switch(action){
	case  1:    // если пользователь выбрал доллар		
		cout&lt;&lt;"\nCource: 5.2 gr.\n";
		break; // остановка switch
	case  2:     // если пользователь выбрал евро
		cout&lt;&lt;"\nCource: 6.2 gr.\n";
		<font style="color:red"> //break;  закомментированна остановка switch</font>
	case  3:    // если пользователь выбрал рубли
		cout&lt;&lt;"\nCource: 0.18 gr.\n";
		break; // остановка switch
	default:    // если выбор некорректен
		cout&lt;&lt;"\nError!!! This operator isn't correct\n";
		break; // остановка switch
	}
}
</example>
<p>Ошибка произойдет в том случае, если будет выбран 2 пункт меню. В case со значением 2 закомментирован оператор остановки break. На экране результат такой ошибки выглядит следующим образом:</p>
<example>Select action:

 1 - if you want to see course of dollar.

 2 - if you want to see course of euro.

 3 - if you want to see course of rub.
2

Cource: 6.2 gr.

<font style="color:red">Cource: 0.18 gr.</font>
Press any key to continue</example>

<p>Кроме необходимой информации на экране показалось то, что находилось в блоке case, располагающемся после ошибочной конструкции. Следует избегать таких опечаток, так как они приводят к ошибкам на этапе выполнения.</p>
<p>В сегодняшнем уроке мы с вами познакомились с операторами, позволяющими производить анализ каких-либо данных. Теперь вы можете переходить к выполнению домашнего задания, а так же закрепить теоретические знания пройдя тест. Желаем удачи!!!!</p>
</lesson>
