<?xml version="1.0" encoding="windows-1251" ?>
<?xml:stylesheet type="text/xsl" href="common/layout.xsl" ?>

<lesson title="Урок №2" next="section05.xml" prev="section03.xml" summ="1">
<h2>Логические операции . </h2>
<p>В программировании зачастую необходимо не только производить какие-то вычисления, но и сравнивать величины между собой. Для этого используются, так называемые логические операции. Результатом логических операций всегда является либо значение true, либо значение  false, то есть истина или ложь. Логические операции делятся на три подгруппы: </p>
									 
<p>1. Операторы сравнения</p>
<p>2. Операторы равенства</p>
<p>3. Логические операторы объединения и отрицательная инверсия.</p>
						
<p>Теперь давайте более детально разберем каждую группу операторов.</p>										
<h3>Операторы сравнения.</h3>
<p>Используются тогда, когда необходимо выяснить каким образом две величины относятся друг к другу.</p>
<table align="center" border="1" cellspacing="0" frame="box" rules="groups" style="margin-bottom: 10;">
<thead>
<tr>
<th>СИМВОЛ, ОБОЗНАЧАЮЩИЙ ОПЕРАТОР</th>
<th>УТВЕРЖДЕНИЕ</th>
</tr>
</thead>
<colgroup style="width: 300; padding-left: 10;" />
<colgroup style="width: 400; padding-left: 10; padding-bottom: 5;" />
<tbody>
<tr>
<td>&lt;</td>
<td>ЛЕВЫЙ ОПЕРАНД МЕНЬШЕ ЧЕМ ПРАВЫЙ ОПЕРАНД</td>
</tr>
</tbody>
<tbody>
<tr>
<td>&gt;</td>
<td>ЛЕВЫЙ ОПЕРАНД БОЛЬШЕ ЧЕМ ПРАВЫЙ ОПЕРАНД</td>
</tr>
</tbody>
<tbody>
<tr>
<td>&lt;=</td>
<td>ЛЕВЫЙ ОПЕРАНД МЕНЬШЕ ИЛИ РАВЕН ПРАВОМУ ОПЕРАНДУ</td>
</tr>
</tbody>
<tbody>
<tr>
<td>&gt;=</td>
<td>ЛЕВЫЙ ОПЕРАНД БОЛЬШЕ ИЛИ РАВЕН ПРАВОМУ ОПЕРАНДУ</td>
</tr>
</tbody>
</table>
<p>Смысл операций сравнения (второе название - <b>операции отношений</b>) состоит в том, что если утверждение, заданное с помощью оператора верно, выражение, в котором он участвует, заменится на значение true, если не верно – на значение false. Например: </p>
<example>
сout&lt;&lt;(5&gt;3); // на экране будет единица, так как утверждение (5&gt;3) истина.
сout&lt;&lt;(3&lt;2); //на экране будет 0, так как (3&lt;2) ложь.
</example>    
<tip start="Примечание"> Вместо значений false и true на экран выводится 0 и 1, так как они эквивалентны значениям ложь и истина. В языке С в роли истины также может выступать любое другое число отличное от 1 и 0, как положительное, так и отрицательное.</tip>

<h3>Операторы равенства.</h3>
<p>Используются для проверки на полное соответствие или несоответствие двух величин.</p>
<table align="center" border="1" cellspacing="0" frame="box" rules="groups" style="margin-bottom: 10;">
<thead>
<tr>
<th>СИМВОЛ, ОБОЗНАЧАЮЩИЙ ОПЕРАТОР</th>
<th>УТВЕРЖДЕНИЕ</th>
</tr>
</thead>
<colgroup style="width: 300; padding-left: 10;" />
<colgroup style="width: 400; padding-left: 10; padding-bottom: 5;" />
<tbody>
<tr>
<td>==</td>
<td>ЛЕВЫЙ ОПЕРАНД РАВЕН ПРАВОМУ</td>
</tr>
</tbody>
<tbody>
<tr>
<td>!=</td>
<td>ЛЕВЫЙ ОПЕРАНД НЕ РАВЕН ПРАВОМУ</td>
</tr>
</tbody>
</table>
<p>Применение этих операторов совпадает с принципом применения предыдущей группы, то есть, на выходе выражение заменяется либо на истину, либо на ложь, в зависимости от утверждения.</p>
<example>cout&lt;&lt;(5!=3); // на экране будет единица, так как утверждение (5!=3) истина.
сout&lt;&lt;(3==2); //на экране будет 0, так как (3==2) ложь.</example>
<h3>Логические операции объединения и отрицательная инверсия.</h3>

<p>В большинстве случаев невозможно обойтись только одним утверждением. Чаще всего необходимо комбинировать утверждения тем или иным образом. Например, чтобы проверить находится ли число в диапазоне от 1 до 10, необходимо проверить два утверждения: число должно одновременно &gt; = 1 и &lt;= 10. Для того чтобы реализовать такую комбинацию необходимо ввести дополнительные операторы.</p>

<table align="center" border="1" cellspacing="0" frame="box" rules="groups" style="margin-bottom: 10;">
<thead>
<tr>
<th>ОПЕРАЦИЯ</th>
<th>НАЗВАНИЕ</th>
</tr>
</thead>
<colgroup style="width: 300; padding-left: 10;" />
<colgroup style="width: 400; padding-left: 10; padding-bottom: 5;" />
<tbody>
<tr>
<td>&amp;&amp;</td>
<td>И</td>
</tr>
</tbody>
<tbody>
<tr>
<td>||</td>
<td>ИЛИ</td>
</tr>
</tbody>
<tbody>
<tr>
<td>!=</td>
<td>НЕ</td>
</tr>
</tbody>
</table>

<h5>Логическое И (&amp;&amp;)</h5>
<p>Логическое И объединяет вместе два утверждения и возвращает истину только в том случае, если и левое и правое утверждения истинны. Если хотя бы одно из утверждений или оба ложны, объединенное выражение заменяется на ложь. Логическое И работает по сокращенной схеме, то есть, если первое утверждение ложь, второе уже не проверяется.</p>
<table align="center" border="1" cellspacing="0" frame="box" rules="groups" style="margin-bottom: 10;">
<thead>
<tr>
<th>УТВЕРЖДЕНИЕ 1</th>
<th>УТВЕРЖДЕНИЕ 2</th>
<th>УТВЕРЖДЕНИЕ 1&amp;&amp;УТВЕРЖДЕНИЕ 2</th>
</tr>
</thead>
<colgroup style="width: 300; padding-left: 10;" />
<colgroup style="width: 300; padding-left: 10;" />
<colgroup style="width: 400; padding-left: 10; padding-bottom: 5;" />
<tbody>
<tr>
<td>true</td>
<td>true</td>
<td>true</td>
</tr>
</tbody>
<tbody>
<tr>
<td>true</td>
<td>false</td>
<td>false</td>
</tr>
</tbody>
<tbody>
<tr>
<td>false</td>
<td>true</td>
<td>false</td>
</tr>
</tbody>
<tbody>
<tr>
<td>false</td>
<td>false</td>
<td>false</td>
</tr>
</tbody>
</table>
<p>Теперь рассмотрим пример, в котором программа получает число и определяет, попадает ли это число в диапазон от 1 до 10.</p>
<example>
#include &lt;iostream&gt;
using namespace std;
void main()
{
	int N;
	cout&lt;&lt;”Enter digit:\n”;
	cin&gt;&gt;N;
	cout&lt;&lt;((N&gt;=1)&amp;&amp;(N&lt;=10));
	cout&lt;&lt;”\n\nIf you see 1 your digit is in diapazone\n\n”;
	cout&lt;&lt;”\n\nIf you see 0 your digit is not in diapazone\n\n”;
}
</example>
<p>В данном примере, если оба утверждения будут верными, на место выражения подставится 1, в противном случае – 0. Соответственно пользователь сможет проанализировать сложившуюся ситуацию, используя инструкции программы.</p>
<h5>Логическое ИЛИ (||)</h5>
<p>Логическое ИЛИ объединяет вместе два утверждения и возвращает истину только в том случае, если хотя бы одно из утверждений верно, и ложь в том случае, если оба утверждения не верны. Логическое ИЛИ работает по сокращенной схеме, то есть, если первое утверждение истина, второе уже не проверяется.</p>
<table align="center" border="1" cellspacing="0" frame="box" rules="groups" style="margin-bottom: 10;">
<thead>
<tr>
<th>УТВЕРЖДЕНИЕ 1</th>
<th>УТВЕРЖДЕНИЕ 2</th>
<th>УТВЕРЖДЕНИЕ 1||УТВЕРЖДЕНИЕ 2</th>
</tr>
</thead>
<colgroup style="width: 300; padding-left: 10;" />
<colgroup style="width: 300; padding-left: 10;" />
<colgroup style="width: 400; padding-left: 10; padding-bottom: 5;" />
<tbody>
<tr>
<td>true</td>
<td>true</td>
<td>true</td>
</tr>
</tbody>
<tbody>
<tr>
<td>true</td>
<td>false</td>
<td>true</td>
</tr>
</tbody>
<tbody>
<tr>
<td>false</td>
<td>true</td>
<td>true</td>
</tr>
</tbody>
<tbody>
<tr>
<td>false</td>
<td>false</td>
<td>false</td>
</tr>
</tbody>
</table>
<p>Еще раз рассмотрим пример, в котором программа получает число и определяет, попадает ли это число в диапазон от 1 до 10. Только, теперь используем ИЛИ.</p>
<example>#include &lt;iostream&gt;
using namespace std;
void main()
{
	int N;
	cout&lt;&lt;”Enter digit:\n”;
	cin&gt;&gt;N;
	cout&lt;&lt;((N&lt;1)||(N&gt;10));
	cout&lt;&lt;”\n\nIf you see 0 your digit is in diapazone\n\n”;
	cout&lt;&lt;”\n\nIf you see 1 your digit is not in diapazone\n\n”;
}
</example>
<p>В данном примере если оба утверждения будут ложными, (то есть число будет не меньше 1 и не больше 10) на место выражения подставится 0, в противном случае – 1. Соответственно пользователь, также как и в предыдущем примере, сможет проанализировать сложившуюся ситуацию и сделать вывод.</p>
<h5>Логическое НЕ (!)</h5>
<p>Логическое НЕ является унарным оператором и в связи с этим не может называться оператором объединения. Оно используется в том случае, если нужно изменить результат проверки утверждения на противоположный.</p>
<table align="center" border="1" cellspacing="0" frame="box" rules="groups" style="margin-bottom: 10;">
<thead>
<tr>
<th>УТВЕРЖДЕНИЕ </th>
<th>!УТВЕРЖДЕНИЕ</th>
</tr>
</thead>
<colgroup style="width: 300; padding-left: 10;" />
<colgroup style="width: 400; padding-left: 10; padding-bottom: 5;" />
<tbody>
<tr>
<td>true</td>
<td>false</td>
</tr>
</tbody>
<tbody>
<tr>
<td>false</td>
<td>true</td>
</tr>
</tbody>
</table>
<example>
// на экране будет 1, так как (5==3) ложь и её инверсия это - истина.
cout&lt;&lt;!(5==3); 
//на экране будет 0, так как (3!=2) истина и её инверсия это - ложь.
сout&lt;&lt;!(3!=2); </example>

<p>Логическое отрицание возвращает на место утверждения ложь, если последнее истинно, и наоборот, истину, если утверждение ложно. Данный оператор можно применить для сокращения постановки условия. Например, выражение <example>b==0</example>можно сокращенно записать с помощью инверсии:<example>!b</example>  обе записи дают на выходе истину, в случае если b будет равно нулю.</p>
<p>В данном разделе мы рассмотрели всевозможные логические операции, которые позволяют определить истинность любого утверждения. Однако описанные здесь примеры являются неудобными для рядового пользователя, так как анализ результатов должен производить не он, а программа. Кроме того, если в зависимости от утверждения необходимо не просто выдавать на экран результат его проверки, а производить какое-либо действие, тут уже пользователь точно бессилен. В связи с этим, обладая знаниями логических операций необходимо получить дополнительную информацию для возможности реализации того или иного действия в зависимости от условия. Именно об этом и пойдет речь в следующем разделе нашего урока.</p>
</lesson>
  



