<?xml version="1.0" encoding="windows-1251" ?>
<?xml:stylesheet type="text/xsl" href="common/layout.xsl" ?>

<lesson title="Урок №2" next="section051.xml" prev="section04.xml" summ="1">
<h2>Конструкция логического выбора if</h2>

<p>Сейчас мы с вами познакомимся с оператором, который позволяет превратить обычную линейную программу в программу «мыслящую». Данный оператор позволяет проверить какое-то утверждение (выражение) на истинность и в зависимости от полученного результата произвести то или иное действие. Для начала рассмотрим общий синтаксис данного оператора:</p>

<example>
if (утверждение или выражение)
{
  	действие 1;
}
else 
{
  	действие 2;
}
</example>

<h3>Основные принципы работы оператора if.</h3>
<p>1. В качестве утверждения или выражения может выступать какая-либо конструкция, содержащая логические операторы или же арифметическое выражение.</p>
<p>• if(X&gt;Y) – обычное утверждение, будет истинным, если X действительно  больше Y</p>
<example>int X=10,Y=5;
if(X&gt;Y){ // истина
	cout&lt;&lt;"Test!!!";// на экране Test
}</example>
<p>• if(A&gt;B&amp;&amp;A&lt;C) – комбинированное утверждение, состоящее из двух частей, будет истинно, если обе части будут верными</p>
<example>int A=10,B=5,C=12;
if(A&gt;B&amp;&amp;A&lt;C){ // истина
	cout&lt;&lt;"A between B and C";// на экране A between B and C
}</example>
<p>• if(A-B) – арифметическое выражение, будет истинным, если А не равно B, т. к. в противном случае (если они равны) их разность даст нуль, а нуль это ложь</p>
<example>int A=10,B=15;
if(A-B){ // -5 это истина
	cout&lt;&lt;"A != В";// на экране A != В
}</example>
<p>• if(++A) - арифметическое выражение, будет истинным, если А не равно -1, т. к. если А равно -1 увеличение на 1 даст нуль, а нуль это ложь</p>
<example>int A=0;
if(++A){ // 1 это истина
	cout&lt;&lt;"Best test!!";// на экране Best test!!
}</example>
<p>• if(A++) - арифметическое выражение, будет истинным, если А не равно 0, т. к.  в данном случае используется постфиксная форма инкремента, сначала произойдет проверка условия и будет обнаружен нуль, а потом увеличение на единицу.</p>
<example>int A=0;
if(A++){ // 0 это ложь
	cout&lt;&lt;"Best test!!";// эту фразу мы не увидим, т. к. if не выполнится
}</example>
<p>• if(A==Z) - обычное утверждение, будет истинным, если A равно Z</p>
<p>• if(A=Z) – операция присваивания, выражение будет истинным, если Z не равно нулю</p>
<tip start="Примечание"><b>Типичная ошибка.</b> Очень часто вместо операции проверки на равенство ==,  по невнимательности указывается операция присваивания =, и смысл выражения может радикально измениться. Такая банальная опечатка может привести к некорректной работе всей программы. Рассмотрим два казалось бы идентичных примера.

<h5>Правильный пример.</h5>
<example># include &lt;iostream&gt;
using namespace std;
void main(){
 
    int A,B; //объявляем две переменные

    //просим пользователя ввести в них данные
    cout&lt;&lt;"Enter first digit:\n";
    cin&gt;&gt;A;
    cout&lt;&lt;"Enter second digit:\n";
    cin&gt;&gt;B;

    if(B==0){ // если B содержит ноль
        cout&lt;&lt;"You can’t divide by zero!!!";// сообщаем об ошибке
    }
    else{ // в противном случае
	  cout&lt;&lt;"Result A/B="&lt;&lt;A&lt;&lt;"/"&lt;&lt;B&lt;&lt;"="&lt;&lt;A/B;// выдаем результат деления А на B
    }
    cout&lt;&lt;"\n The end. \n"; // конец
}</example>
<h5> Пример с ошибкой.</h5>
<example># include &lt;iostream&gt;
using namespace std;
void main(){
 
    int A,B; //объявляем две переменные

    //просим пользователя ввести в них данные
    cout&lt;&lt;"Enter first digit:\n";
    cin&gt;&gt;A;
    cout&lt;&lt;"Enter second digit:\n";
    cin&gt;&gt;B;

    // Приравниваем B к нулю и проверяем условие, оно автоматически ложно
    if(B=0){ // эта часть не выполнится никогда, т. к. условие всегда ложно
        cout&lt;&lt;"You can’t divide by zero!!!";// сообщаем об ошибке
    }
    else{// всегда выполняется эта часть, в которой A делится на новоиспеченный нуль 

// В этой строке произойдет ошибка на этапе выполнения, т. к. компьютер попытается разделить число на нуль
	  cout&lt;&lt;"Result A/B="&lt;&lt;A&lt;&lt;"/"&lt;&lt;B&lt;&lt;"="&lt;&lt;A/B;
    }
    cout&lt;&lt;"\n The end. \n"; // Эту фразу мы не увидим никогда.
}</example>

</tip>

<p>2. Как вы уже успели заметить, если содержимое круглых скобок будет являться истиной, то выполнится действие 1, заключенное в фигурные скобки конструкции if, при этом действие 2 блока else будет проигнорировано.</p>
<p>3. Если же содержимое круглых скобок ложно, выполнится действие 2, заключенное в фигурные скобки конструкции else, при этом действие 1 будет проигнорировано.</p>
<p>4. Конструкция else является необязательной. Это означает, что если нет необходимости делать что-либо при ложности утверждения, данную конструкцию можно не указывать. Например, программу, использующую защиту против деления на нуль, можно записать таким образом:</p>
<example># include &lt;iostream&gt;
using namespace std;
void main(){
    int A,B; //объявляем две переменные

    //просим пользователя ввести в них данные
    cout&lt;&lt;"Enter first digit:\n";
    cin&gt;&gt;A;
    cout&lt;&lt;"Enter second digit:\n";
    cin&gt;&gt;B;

    if(B!=0){ // если В не равно нулю
        cout&lt;&lt;"Result A/B="&lt;&lt;A&lt;&lt;"/"&lt;&lt;B&lt;&lt;"="&lt;&lt;A/B; // производим вычисления
    }
    // в противном случае не делаем ничего
    cout&lt;&lt;"\nThe end.\n";
}
</example>
<p>5. Если к блоку if или else относится только одна команда, то фигурные скобки можно не указывать. С помощью этого правила сделаем программу еще короче:</p>
<example># include &lt;iostream&gt;
using namespace std;
void main(){
    int A,B; //объявляем две переменные

    //просим пользователя ввести в них данные
    cout&lt;&lt;"Enter first digit:\n";
    cin&gt;&gt;A;
    cout&lt;&lt;"Enter second digit:\n";
    cin&gt;&gt;B;

    if(B!=0) // если В не равно нулю
        cout&lt;&lt;"Result A/B="&lt;&lt;A&lt;&lt;"/"&lt;&lt;B&lt;&lt;"="&lt;&lt;A/B; // производим вычисления

    // в противном случае не делаем ничего
    cout&lt;&lt;"\nThe end.\n";
}</example>
<p>Мы только что познакомились с условным оператором if и обсудили основные принципы его действия. Прежде чем переходить к рассмотрению специфических особенностей if и практическим примерам, сделаем небольшое отступление и посмотрим на еще один оператор,  с помощью которого можно поставить простое условие.</p>

<tip start="Примечание">Будьте внимательны: <b>оператор if и оператор else неразрывны!!! Попытка вписать между ними строку кода, приведет к ошибке на этапе компилляции.</b>

<h5>Фрагмент кода с ошибкой.</h5>
<example>
	....
    if(B==0){ // если B содержит ноль
        cout&lt;&lt;"You can’t divide by zero!!!";// сообщаем об ошибке
    }
   <font style="color:red"> cout&lt;&lt;"Hello";// Ошибка!!!! Разрыв конструкции if - else!!!</font>
    else{ // в противном случае
	  cout&lt;&lt;"Result = "&lt;&lt;A/B;// выдаем результат деления А на B
    }
	....
</example>
</tip>
<h3>Тернарный оператор.</h3>
<p>Некоторые условия являются очень примитивными. Например, возьмем нашу программу деления двух чисел. Она проста и с точки зрения действий и с точки зрения кода. На операторы if и else приходится по одной строке кода - действия. Такую программу, можно упростить еще больше, используя тернарный оператор.</p>
<p>Для начала рассмотрим его синтаксис:</p>
<example>УТВЕРЖДЕНИЕ ИЛИ ВЫРАЖЕНИЕ?ДЕЙСТВИЕ1:ДЕЙСТВИЕ2;</example>
<p>Принцип действия прост - если УТВЕРЖДЕНИЕ ИЛИ ВЫРАЖЕНИЕ - истина, выполняется ДЕЙСТВИЕ1, если - ложь, выполняется ДЕЙСТВИЕ2.</p>
<p>Давайте рассмотрим деиствие данного оператора на примере:</p>
<example># include &lt;iostream&gt;
using namespace std;
void main(){
    int A,B; //объявляем две переменные

    //просим пользователя ввести в них данные
    cout&lt;&lt;"Enter first digit:\n";
    cin&gt;&gt;A;
    cout&lt;&lt;"Enter second digit:\n";
    cin&gt;&gt;B;

    /* В данном случае, если В не будет равно нулю, выполниться та команда, которая
   	стоит после знака вопроса и на экране покажется результат деления. В
  	противном случае выполниться команда стоящая после знака
   	двоеточие и на экране будет сообщение об ошибке деления на нуль.*/
    (B!=0)?cout&lt;&lt;"Result A/B="&lt;&lt;A&lt;&lt;"/"&lt;&lt;B&lt;&lt;"="&lt;&lt;A/B:cout&lt;&lt;"You can’t divide by zero!!!";

    //конец программы
    cout&lt;&lt;"\n The end. \n";
}</example>
<p>Не правда ли, код стал еще оптимальнее!? Для закрепления полученной информации приведем еще один, более сложный, пример. Программа, будет определять, какое из двух чисел, введенных пользователем является большим, а какое меньшим.</p>
<example># include &lt;iostream&gt;
using namespace std;
void main(){
    int a,b; //объявляем две переменные

    //просим пользователя ввести в них данные
    cout&lt;&lt;"Enter first digit:\n";
    cin&gt;&gt;a;
    cout&lt;&lt;"Enter second digit:\n";
    cin&gt;&gt;b;

    /*Если, (b&gt;a), то на место оператора ?: подставится b,
    в противном случае на место оператора подставится a,
    таким образом, то число, которое больше запишется
    в переменную max.*/
    int max=(b&gt;a)?b:a;

    /*Если, (b&lt;a), то на место оператора ?: подставится b,
    в противном случае на место оператора подставится a,
    таким образом, то число, которое больше запишется
    в переменную min.*/
    int min=(b&lt;a)?b:a;

    // Вывод результата на экран.
    cout&lt;&lt;"\n Maximum is \n"&lt;&lt;max;
    cout&lt;&lt;"\n Minimum is \n"&lt;&lt;min&lt;&lt;"\n";
}</example>
<p>Итак, давайте твердо уясним следующее:
<b> Если условие и действия от него зависящие, достаточно просты, будем использовать тернарный оператор. Если же нам необходима сложная конструкция, то, безусловно, используем оператор if.</b></p>
</lesson>
