<?xml version="1.0" encoding="windows-1251" ?>
<?xml:stylesheet type="text/xsl" href="common/layout.xsl" ?>

<lesson title="Урок №2" next="section021.xml" prev="section01.xml" summ="0">	
 <h2>Арифметические операции с числами.</h2> 
<h3>Хорошо забытое старое…</h3>

<p>Итак, приступим. Как уже было отмечено ранее – <b>арифметические операции</b> – это операции, позволяющие производить арифметические действия над данными. Большинство из них вам знакомы с детства и, тем не менее, давайте, систематизируем наши знания с помощью таблицы представленной ниже.</p>
<table align="center" border="1" cellspacing="0" frame="box" rules="groups" style="margin-bottom: 10;">
<thead>
<tr>
<th>Название операции</th>
<th>Символ, применяемый для обозначения в языке С.</th>
<th>Краткое описание. Пример.</th>
</tr>
</thead>
<colgroup style="width: 300; padding-left: 10;" />
<colgroup style="width: 300; padding-left: 10;" />
<colgroup style="width: 400; padding-left: 10; padding-bottom: 5;" />
<tbody>
<tr>
<td>Сложение</td><td align="center">+</td><td>Складывает два значения вместе, результатом является сумма операндов:
5+18 результат 23</td>
</tr>
</tbody>
<tbody>
<tr>
<td>Вычитание</td><td align="center">-</td><td>Вычитает значение, находящееся справа из значения, находящегося слева от оператора. Результат – разность операндов:
20-15 результат 5</td>
</tr>
</tbody>
<tbody>
<tr>
<td>Умножение</td><td align="center">*</td><td>Перемножает два значения, результатом является произведение операндов:
5*10 результат 50</td>
</tr>
</tbody>
<tbody>
<tr>
<td>Деление</td><td align="center">/</td><td>Делит значение, находящееся слева на значение, находящееся справа от оператора. Например:
20/4 результат 5</td>
</tr>
</tbody>
<tbody>
<tr><td>
Деление по модулю</td><td align="center">%</td><td>Результатом этой операции является остаток от целочисленного деления, например, если мы делим 11 на 3, то целых частей у нас получается 3, (так как 3*3=9), в остатке будет 2, это число и будет результатом деления по модулю:
<br/>11/3 = 3 целых 2 в остатке
<br/>11%3 = 2 (остаток)</td>
</tr>
</tbody>
</table>
<tip start="Примечание"> 

<p>1. Операцию деления по модулю, можно применять только к целочисленным данным. Попытки нарушить данное правило приведут к ошибке на этапе компиляции.</p>

<p>2. Если меньшее число делится на большее с помощью %, то результатом будет само меньшее число. 3%10 = 3</p>

<p>3. Делить по модулю на нуль нельзя, это приведет к некорректной работе программы на этапе выполнения. </p>
</tip>

<h3>Инкремент и декремент.</h3>
 
<p>Все вышеописанные операции, являлись бинарными, однако существуют еще и унарные арифметические операции, таких операций в школьном курсе нет, хотя на самом деле они очень просты:</p>

<p>1.<b>Инкремент</b> – обозначается конструкцией ++. Данный оператор увеличивает содержимое любой переменной на единицу и перезаписывает значение переменной. Например, </p>

<example>
int a=8;
cout&lt;&lt;a; // на экране число 8
a++;
cout&lt;&lt;a; // на экране число 9
</example>

<p>2.<b>Декремент</b> – обозначается конструкцией --. Данный оператор уменьшает содержимое любой переменной на единицу и перезаписывает значение переменной. Например, </p>
<example>
int a=8;
cout&lt;&lt;a; // на экране число 8
a--;
cout&lt;&lt;a; // на экране число 7
</example>

<p>Достаточно просто, не правда ли?!  Такие выражения могут быть представлены и так: a=a+1 или a=a-1. Следует отметить, что для литералов ни инкремент, ни декремент не используются, т. к. совершенно не логично поступать следующим образом 5=5+1. Это явная ошибка. Однако на этом мы не закончим знакомство с инкрементом и декрементом. В прошлом разделе урока мы выяснили, что синтаксис унарного оператора, может быть не только таким</p>

<example>операнд оператор;</example>

, но и таким

<example>оператор операнд;</example>

<p>Такие формы записи носят название <b>постфиксной</b>, (<i>оператор располагается после значения</i>) и <b>префиксной </b>(<i>оператор располагается до значения</i>). И инкремент, и декремент обладают обеими формами. Давайте разберемся, какие есть различия между формами, и в каких случаях эти различия имеют значение.</p>

<h5>Пример 1.</h5>

<example>
int a=8;
cout&lt;&lt;a; // на экране число 8
a++;
cout&lt;&lt;a; // на экране число 9
++a;
cout&lt;&lt;a; // на экране число 10
</example>

<p>В данном примере нет никакой разницы, между префиксной и постфиксной формой. И в первом и во втором случае значение переменной а просто увеличивается на единицу. Смысл использования различных форм оператора появляется только тогда, когда в строке кроме самого оператора, есть еще какая-нибудь команда. </p>

<h5>Пример 2.</h5>

<example>
int a=8;
cout&lt;&lt;++a; // на экране число 9
cout&lt;&lt;a++; // на экране число 9
cout&lt;&lt;a; // на экране число 10
</example>

<p>Прежде чем разбирать пример, давайте установим три правила:</p>

<p>1. Принцип выполнения команд в языке С неоднозначен. Поэтому ниже приводится таблица направления действия некоторых операторов:
</p>
<center><img src="images\1.jpg" ></img></center>
<p>2. Если кроме постфиксной формы инкремента или декремента, в строке есть еще какая-либо команда, то сначала выполняется эта команда, и только потом инкремент или декремент независимо от расположения команд в строке.</p>
<p>3. Если кроме префиксной формы инкремента или декремента, в строке есть еще какая-либо команда, то все команды в строке выполняются справа налево согласно приоритету операторов.</p>

<p>Теперь более подробно о примере:</p>

<p>• Изначально значение переменной равно числу 8.</p>
<p>• Команда cout&lt;&lt;++a; содержит префиксную форму оператора инкремент, следовательно, используя третье правило, описанное выше, мы сначала увеличиваем значение переменной а на единицу, а затем показываем его на экран с помощью команды cout&lt;&lt;.</p>
<p>• Команда cout&lt;&lt;a++; содержит постфиксную форму оператора инкремент, следовательно, используя второе правило, описанное выше, мы сначала показываем значение переменной (всё еще 9) на экран с помощью команды cout&lt;&lt;, а затем увеличиваем значение переменной a на единицу.</p>
<p>• При выполнении следующей команды cout&lt;&lt;a; будет показано уже измененное (увеличенное) значение, то есть число 10.</p>

<h4>Сокращенные арифметические формы.</h4>

<p>Исходя из предыдущих тем данного раздела урока, мы с вами теперь знаем, как упростить неудобную и «некрасивую» запись типа х=х+1 или х=х-1, превратив её в х++, или х--. Но таким образом, мы можем увеличивать и  уменьшать значение переменной лишь на единицу, а как быть с любым другим числом? Например, как упростить запись: </p>

<example>Х=Х+12;</example>

<p>В данном случае, тоже есть простое решение – использовать так называемые комбинированные операторы или сокращенные арифметические формы. Выглядят они следующим образом:</p>
<table align="center" border="1" cellspacing="0" frame="box" rules="groups" style="margin-bottom: 10;">
<thead>
<tr>
<th>Название формы</th>
<th>Комбинация</th>
<th>Стандартная запись</th>
<th>Сокращенная запись</th>
</tr>
</thead>
<colgroup style="width: 300; padding-left: 10;" />
<colgroup style="width: 300; padding-left: 10;" />
<colgroup style="width: 300; padding-left: 10;" />
<colgroup style="width: 400; padding-left: 10; padding-bottom: 5;" />
<tbody>
<tr>
<td>Присваивание с умножением</td>
<td align="center">*=</td>
<td align="center">А=А*N</td>
<td align="center">A*=N</td>
</tr>
</tbody>
<tbody>
<tr>
<td>Присваивание с делением</td>
<td align="center">/=</td>
<td align="center">A=A/N</td>
<td align="center">A/=N</td>
</tr>
</tbody>
<tbody>
<tr>
<td>Присваивание с делением по модулю</td>
<td align="center">%=</td>
<td align="center">A=A%N</td>
<td align="center">A%=N</td>
</tr>
</tbody>
<tbody>
<tr>
<td>Присваивание с вычитанием</td>
<td align="center">-=</td>
<td align="center">A=A-N</td>
<td align="center">A-=N</td>
</tr>
</tbody>
<tbody>
<tr>
<td>Присваивание со сложением</td>
<td align="center">+=</td>
<td align="center">A=A+N</td>
<td align="center">A+=N</td>
</tr>
</tbody>
</table>

<p>Мы рекомендуем вам в дальнейшем пользоваться сокращенными формами, так как это не только является хорошим тоном в программировании, но и значительно повышает читабельность программного кода. Кроме того, в некоторых источниках упоминается о том, что сокращенные формы обрабатываются компьютером быстрее, повышая скорость выполнения программы.</p>

<h3>Применение арифметических операций.</h3>

<p>Теперь самое время убедиться во всем вышесказанном на практике, потому что, как говорится, лучше один раз увидеть, чем сто раз услышать. Вы уже умеете создавать проекты и добавлять в них файлы, собственно именно это от вас сейчас и требуется. Далее представленно несколько программ, которые вам необходимо набрать, что бы увидеть применение арифметических операции на практике. </p>

</lesson>
