<?xml version="1.0" encoding="windows-1251" ?>
<?xml:stylesheet type="text/xsl" href="common/layout.xsl" ?>

<lesson title="C#" next="section8C.xml" prev="index.xml" summ="1">
<h2>18HС. Домашні завдання по курсу C#</h2>
  <h3>Модуль 1. Введення. Перша програма. Типи даних та змінні. Приведення до типу. Введення та виведення даних. Оператори. Умовні оператори if та switch. Цикли</h3>
<h5>Завдання 1</h5>
  <p>
Дані цілі позитивні числа А, В, С, значення яких вводиться з клавіатури користувачем. На прямокутнику розміра А*В розміщена максимально можлива кількість квадратів зі стороною С. Квадрати не накладаються один на одний. Знайти кількість квадратів, розміщених на прямокутнику, а також площу незайнятої частини прямокутника.
  </p>
<p>Необхідно також передбачити виведення службових повідомлень у випадку, якщо в прямокутнику неможливо розмістити жодного квадрата з стороною С (наприклад, якщо значення С перевищує розмір сторін прямокутника).</p>
<h5>Завдання 2</h5>
  <p>Початковий вклад в банку рівний 1000 грн. Через кожен місяць розмір вкладу збільшується на Р процентів від наявної суми (Р - дійсне число, 0 &lt; P &lt; 25). Значення Р программа повинна отримувати від користувача. По даному Р программа повинна визначити, через скільки місяців розмір вкладу перевищить 1100 грн. та вивести знайдену кількість місяців К (ціле число) та підсумковий розмір вкладу S (дійсне число).
  </p>
<p>Орієнтовний приклад реалізації: <br/> <img src="images/01.02.gif" /></p>
<h5>Завдання 3</h5>
  <p>Дані цілі позитивні числа А та В (А &lt; В). Вивести всы цылы числа выд А до В включно; кожне число повинно виводитись з нового рядка. При цьому кожне число повинно виводитись кількість разів, яке рівне її значенню, наприклад, число 3 виводиться 3 рази.</p>
<p>Наприклад: якщо А = 3, а В = 6, .то програма повинна сформувати в консолі наступний вивід:</p>
<example>
3 3 3
4 4 4 4
5 5 5 5 5
6 6 6 6 6 6
</example>
<h5>Завдання 4</h5>
  <p>Дано ціле число N (&gt; 0). Необхідно знайти число, отримане при зчитуванні числа N з права на ліво, тобто реверсоване число. Наприклад, якщо було введено число 345, то програма повинна вивести число 543.</p>
 <hr/>
<h3>Модуль 2. Масиви. Рядки. Аргументи командного рядка. Синтаксис оголошення класу. Специфікатори доступу С#. Конструктори та деструктори в класі. Garbage Collector. Передача параметрів по значенню та по ссилці (ref і out параметри). Методи, об’єкти та масиви. Створення методів з змінною кількістю параметрів. Часткові типи (partial types)</h3>
<h5>Завдання 1</h5>
<p>
Написати клас <b>"StrArray"</b>. Даний клас містить набір статичних методів для роботи з масивами даних та рядками:
<ol>
<li>Перетворює цілочисельний масив одновимірний таким чином, щоб спочатку йшли всі додатні елементи, а потім від'ємні. Результат роботи, тобто вдалося зсунути (true) чи не вдалося (false) повертається в третій параметр метода.</li>
<li>Циклічно зрушує (зсовує) масив на n елементів вліво або вправо (визначається додатковим параметром, флагом).</li>
<li>Даний двухвимірний масив розмірністю MxN. Необхідно заповнити його довільними числами в діапазоні від -50 до 200, вивести його на екран і відсортувати стовпчики матриці по сумі елементів стовпчика</li>
<li>Метод, який видаляє з рядка 1 всі символи, які зустрічаються в рядку 2. Рядки передаються в якості параметрів метода.</li>
</ol>
Масиви передаються в якості параметрів, а в ряді методів можуть повертатись з функції. Відмітимо також, що для класа заборонено створення екземпляра, тобто заборонений виклик конструкторів.</p>
<h5>Завдання 2</h5>
<p>
Написати клас, що складається лише з статичних методів та реалізує роботу з числами. Він містить наступний набір методів:<ul>
<li>Метод swap, що міняє місцями значення двох змінних, які вказуються в командному рядку.</li>
<li>Метод з змінною кількістю параметрів для обрахунку добутка переданих аргументів.</li>
</ul>
</p>
<h5>Завдання 3</h5>
<p>
Створити клас <b>"Department" (Відділ)</b>, що містить в собі наступні поля:<ul>
<li>назва відділу</li>
<li>телефон</li>
<li>масив працівників, що також описаний окремим класом <b>"Employee" (Працівник)</b>. Клас, що описує працівника, містить дані про його ім'я, прізвище, посаду та оклад.</li>
</ul>
Даний клас містить набір методів, що дозволяють:<ul>
  <li>здійснити модифікацію даних про відділ</li>
  <li>змінювати інформацію про працівників</li>
  <li>вивести інформацію про відділ вцілому</li>
  <li>додавати / видаляти працівників з/до відділу</li>
  <li>здійснювати вивід інформації по окремій посаді, тобто виводити на екран, наприклад, список менеджерів відділу з інформацією про їх з/п. Працівники виводять у відсортованому вигляді, в порядку спадання їх зарплат.</li>
  <li>виводити загальний ФОП (фонд оплати праці) працівників відділу</li>
  </ul>
В функції main() створити кілька відділів, наприклад, Бухгалтерію, Відділ маркетингу, Відділ постачання та вивести про них інформацію. Дозволити також користувачу додавати нових працівників у відділ та переміщувати працівника у інший відділ.</p>
<p><b>ПРИМІТКА!</b> Створення класів проводити в окремих (*.cs) файлах.</p>
<hr />

<h3>Модуль 3. Виключення та клас System.Exception. Простори імен. Препроцесор. Компоновочні файли і тип доступу internal. Перевантаження операторів. Індексатори</h3>
<h5>Завдання 1</h5>
<p>До завдання 3 додати обробку наступних виключних ситуацій та здійснити їх обробку:
<ol>
<li>Перевищення розміру масиву працівників відділу</li>
<li>Видалення даних з пустого масиву (видалення працівника з відділу, якщо в відділі ще немає жодного працівника)</li>
<li>При невірній спробі введення даних надати користувачу можливість здійснити повторну спробу введення даних</li>
<li>Перевірка на переповнення даними змінної, що містить значення окладу працівника</li>
</ol></p>
<h5>Завдання 2</h5>
<p>
Написати клас, який реалізує роботу з <b>"Комлексними числами" (Complex)</b>, які складаються з двох частин (два поля): цілої та дробової частини. Перевантажити для роботи з об'єктами даного класу наступні операції:
<ul>
<li>+ для додавання двох комплексних чисел</li>
<li>- для віднімання двох комплексних чисел</li>
<li>- для віднімання від комплексного числа цілочисельного значення (наприклад, objRes = obj - 5) </li>
<li>* для множення цілочисельного значення, введеного користувачем на комплексне число (наприклад, objRes = 4 * obj)</li>
<li>* для множення двох комплексних чисел</li>
<li>/ для ділення двох комплексних чисел</li>
<li>операції порівняння двох комплексних чисел = = та &lt;</li>
<li>логічні операції <![CDATA[ & та |, а також && та || ]]></li>
</ul>
Додати також методи, для введення та виведення комплексного числа.</p>
<p>В результаті перевантаження операторів, наступний код повинен завершитись успішно та пройти компіляцію:
<example>
Complex c = new Complex(1,1);
Complex b, z;
b = c - (c * c * c - 1) / (3 * c * c);
Console.WriteLine("b = {0}", b);

z = (c - 5) + b;
Console.WriteLine("z = {0}", z);
</example>
</p>

<p><b>ПРИМІТКА!</b> Будь-яке комплексне число може бути представлене як формальна сума x + iy, де x та y - дійсні числа, і - умовна одиниця, тобто число, яке задовільняє рівності i<sup>2</sup> = -1. <br/> <img src="images/complex.gif" /> </p>
<h5>Завдання 3</h5>
<p>Напишіть клас <b>"Parking" (Автопарк, автостоянка)</b>, що складається з масиву машин, які описані окремим класом <b>"Car" (Автомобіль)</b>.
Клас Car містить наступну інформацію:
<ul>
<li>дата реєстрації, яка описується окремим класом <b>"Date" (Дата)</b>;</li>
<li>марка автомобіля;</li>
<li>рік випуску;</li>
<li>колір;</li>
<li>номер.</li>
</ul>
Написати та протестувати методи:
<ul>
<li>виводу інформації про всі зареєстровані автомобілі (доступ може здійснюватись по індексу авто в масиві, або по марці автомобіля);</li>
<li>реєстрації нового авто в автопарку;</li>
<li>знищення запису про реєстрацію;</li>
<li>пошуку машини за будь-якою комбінацією ознак.</li>
</ul>
При цьому кожен клас описати в окремих файлах, а класи Car та Parking помістити в окремий простір імен <b>Vehicle</b>.
</p>
<h5>Завдання 4</h5>
<p>В С# індексація починається з нуля, але в деяких мовах програмування це не так. Наприклад, в Turbo Pascal індексація масиві починається з 1. Напишіть свій клас <b>"RangeOfArray"</b>, що дозволяє використовувати індексатори і властивості для створення масиву такого типу, в якому індексний діапазон визначається користувачем. Наприклад, в діапазоні від 6 до 10, або від –9 до 15.</p>
<p><b>Підказка!</b> В класі можна оголосити дві змінних, які будуть містити значення верхнього та нижнього індекса допустимого діапазону.</p>
<hr />
<h3>Модуль 4. Успадкування. Віртуальні методи. Абстрактний клас. Аналіз базового класу Object. Упаковка та розпаковка (boxing, unboxing). Успадкування та виключення. Інтерфейси. Динамічна ідентифікація типів. Використання операторів is, as та typeof.  </h3>
<h5>Завдання 1</h5>
<p>Для простору імен <b>System.Windows.Forms</b> використовуючи MSDN Library проаналізувати наступні класи та їх взаємозвязки: ScrollableControl, ContainerControl, Form, UserControl, PropertyGrid, SplitContainer, ToolStripContainer, ToolStripPanel, UpDownBase, DomainUpDown, NumericUpDown, Panel, ToolStrip, Control, ButtonBase, Button, CheckBox, RadioButton, DataGrid, DataGridView, DateTimePicker, GroupBox, Label, ListControl, ListBox, ListView, MonthCalendar, PictureBox, ProgressBar, PrintPreviewControl, ScrollableControl, ScrollBar, Splitter, StatusBar, TabControl, TextBoxBase, ToolBar, TreeView, TrackBar. Побудувати діаграми класів.</p>
<h5>Завдання 2</h5>
<p>Опишіть класи <b>"Swordsman" (Мечник)</b>, <b>"Archer" (Лучник)</b> і <b>"Mage" (Маг)</b>, кожен з яких є екземпляром базового абстрактного класу <b>"Unit" (штука, елемент)</b> в комп'ютерній грі, і може атакувати, ухилятись від атак і вмирати. Ці методи повинні бути чистими віртуальним функціями.</p>
<p>У мечника 15 хіт-поінтів (життів), пошкодження при атаці 5, шанс ухилятись 60%.<br/>
Лучник: 12 hp, 4 dmg, 40% dodge<br/>
Маг: 8 hp, 10 dmg, 30% dodge<br/>
</p>
<p>В main() створіть два масива (ворогуючі сторони) по три юніта в кожному, причому тип юніта (мечник, лучник чи маг) має задаватись випадково, при заповненні цих масивів. Тобто один раз запустивши вашу програму, може створитись три лучники проти мечника і двох магів, іншого - лучник, мечник і маг проти двох мечників і лучника і т.д.</p>
<p>Далі в циклі земулюйте бій між ними, поки бійці однієї з сторін всі не загинуть. В консоль при цьому виводьте повідомлення хто кого атакував, чи вдалась атака, скільки життя залишилось у жертви чи вона загинула. Нехай бій відбувається поступово, по натиснення клавіші spacebar (пробіла), щоб ми могли спостерігати його атака за атакою.</p>
<p>В кінці бою оголосіть, яка команда перемогла (перша/друга, синя/червона, альянс/орки - як вже ваша фанатзія вам підскаже).</p>

<p><b>Примітка!</b> Реалізуйте також можливість, щоб кожен боєць (Воїн, Лучник чи Маг) вишукував серед ворогів суперника свого типу і атакував його. Скажімо, якщо маємо команди:<br />
A11 - M21<br />
A12 - S22<br />
S13 - A23<br />
...то А11 має вибрати своєї ціллю А23.</p>
<p>Якщо ворогів свого типу не знайдено, нехай генерується відповідне повідомлення про помилку та бійці атакують по старим правилам.</p>
<h5>Завдання 3</h5>
<p>Розробити архітектуру класів ієрархії товарів при розробці <b>системи управління потоками товарів</b> для дистриб'юторської компанії. Продумати члени класів, а також створити діаграми взаємозв'язків класів та інтерфейсів.</p>
<p>Необхідно передбачити різні типи товарів, в тому числі: <ul><li>побутова хімія</li><li>продукти харчування</li></ul>
Передбачити інтерфейси:<ol>
<li>продукти, які швидко псуються (perishable foods);</li>
<li>акцизні продукти: лікерогорілчані продукти і тютюнові вироби;</li>
<li>легкозаймисті товари;</li>
<li>товари, що б'ються.</li>
</ol>
Передбачити класи, які управляють потоком товарів: прийшло, реалізовано, списано, передано.
</p>
<p>Реалізувати власні класи виключень:<ul>
<li>"немає в наявності";</li>
<li>"вийшов срок придатності";</li>
<li>"бракований товар".</li>
</ul></p>
<hr />
<h3>Модуль 5. Структури. Перелічувані констранти (enum). Глибоке та поверхневе копіювання. Делегати. Події</h3>
<h5>Завдання 1</h5>
<p>
Написати два методи для малювання фігур, що мають один параметр, який містить колір фігури:
<ul>
<li>DrawRectangle - для малювання прямокутника</li>
<li>DrawTriangle - для малювання прямокутного трикутника</li>
</ul>
Створити багатоадресний (multicasting) делегат, який малює ці фігури переданим кольором.</p>
<h5>Завдання 2</h5>
<p>
Реалізувати програму, яка має наступну орієнтовну структуру:<br/>
<img src="images\5.2_Hierarhy.png" />
</p>
<p>В основній програмі створити кілька клієнтів та реалізувати продаж кількох товарів. Після цього необхідно вивести звіт по продажам. Крім того, потрібно надати можливості через foreach перебирати замовлення.</p>
<p><b>ПРИМІТКА!</b> Набір замовлених товарів клієнтом в класі Request можна організувати масивом або списком.</p>
<h5>Завдання 3</h5>
<p>Інтерфейс <b>INotifyPropertyChanged</b> простору імен System.ComponentModel визначає, що спадкоємець містить подію PropertyChanged, яка сповіщає про зміни властивостей об'єкта. Необхідно вивчити даний інтерфейс, використовуючи MSDN Library. Проаналізувавши роботу загальної бібліотеки, необхідно розробити класи: Author, Book, Client, LibraryCard, Catalogue. Описати їх поля та властивості і для класу реалізувати інтерфейс INotifyPropertyChanged. Створити діаграму класів.</p>
<hr />
<h3>Модуль 6. Інтерфейси та класи колекцій простору імен System.Collections. Спеціалізовані колекції з простору імен System.Collections.Specialized. Узагалюнюючі класи простору імен System.Collections.Generic. Створення та використання власних узагальнюючих методів, структур, класів, класів-колекцій, інтерфейсів, делегатів, базових класів. Використання обмежень.</h3>
<h5>Завдання 1</h5>
<p>
Написати програму, в якій існують методи, що дозволяють створити та реалізувати:
<ol><li>клас-колекцію SortedList на основі елементів типу double</li>
<li>узагальнюючий клас <![CDATA[SortedSet<T> ]]>на основі елементів типу string та int.</li>
</ol>
Даний клас також повинен містити метод, який дозволяє підрахувати скільки разів кожне слово зустрічається в заданому тексті. Результат записати в колекцію <![CDATA[Dictionary<TKey, TValue>]]>.</p>
<p>Оцінка залежить від повноти та якості реалізації кожного класу-колекції.</p>
<h5>Завдання 2</h5>
<p>Створити узагальнюючий клас прямої на площині. В класі передбачити 2 поля типу точки (Point), - точки, через які проходить пряма. Реалізувати в класі:<ul><li>конструктор, який приймає дві точки;</li><li>конструктор, який приймає 4 координати: x та y координати для першої і другої точки;</li><li>метод ToString().</li></ul></p>
<h5>Завдання 3</h5>
<p>Створити примітивний англо-український і україно-англійський словник, який містить пари слів: назва країн на українській та англійській мовах. Користувач повинен мати можливість обирати напрям перекладу і запитувати переклад.</p>
<p>Для реалізації даного завдання скористатись класом-колекцією Hashtable</p>
<hr />
<h3>Модуль 7. Файли. Директорії. Регулярні вирази</h3>
<p><ol>
<li>Написати програму, яка шукає в вказаному каталозі та його підкаталогах XHTML-файли та виводить їх список на екран в нумерованому вигляді. Після цього програма повинна за допомогою регулярних виразів здійснювати очистку від тегів вміст обраного користувачем файла і пропонувати зберегти результат в інший текстовий файл. <br />На 12 балів реалізувати збереження результатів пошуку і заміни в окремому файлі звіту (log file).</li>
<li>Написати програму для роботи з файлами, яка за допомогою меню повинна реалізувати:
<ul><li>можливість здійснювати пошук файлів і папок по імені, розміру, датам створення, доступу і модифікації;</li>
<li>можливість видалення або переіменування вказаних файлів та директорій;</li>
<li>копіювання вмісту однієї директорії в іншу. Вхідна та вихідна директорії задаються користувачем. По бажанню, можна відобразити на консолі процес перенесення вмісту однієї директорії або файла в іншу.</li>
<li>створення, наповнення та збереження файлу з вказаним іменем.</li>
</ul></li></ol>
</p>
<hr />
<h3>Модуль 8. Використання XML в .NET</h3>
<p>Розробити <b>програму по роботі з XML-документом "Список замовлень"</b>, де кожне замовлення складається з кількох товарів. Програма через меню повинна забезпечити:
<ol>
<li>Збереження інформації про замовлення товарів за допомогою класу XmlTextWriter. Інформація вводиться користувачем, але певна частина замовлень може бути створена по замовчуванню для кращого тестування програми.</li>
<li>Перевірку на валідність поточного XML-документа згідно обраної XSD-схеми.</li>
<li>Перетворення поточного XML-документа в HTML-документ (згідно XSLT).</li>
<li>Пошук вказаного користувачем замовлення в XML-документі (за допомогою XPath-виразу).</li>
<li>Вивести отриману інформацію про замовлення на екран за допомогою класів XmlTextReader та XmlDocument (обирається обраним пунктом меню).</li>
</ol>
Структуру XML-документа, а також XSLT та XSD схему до нього розробити самостійно.
</p>
<hr />
<h3>Модуль 9. Вказівники в .NET. Відображення (reflection). Атрибути та серіалізація.</h3>
<h5>Дане домашнє завдання являється необов'язковим</h5>
<h5>Завдання 1. На використання вказівників.</h5>
<p>Написати структуру <b>Arithmetics</b>, яка складається з двох полів типу int та трьох методів: 
<ul><li>для виводу значень змінних-членів класу на екран (перевантажити для цього метод Object.ToString())</li>
<li>додавання значень членів класу (метод повертає результат додавання)</li>
<li>ділення двох чисел, які передаються в якості параметрів (результат ділення повертається в третій параметр по вказівнику, а повертаємим значенням є стан процесу ділення (вірно чи помилка))</li>
</ul>
Створити вказівник та програти за допомогою нього клас та його методи двома способами: в першому випадку доступ до елеменів та методів класу здійснити через вказівник, а в другому – через розіменування вказівника.
</p>
<h5>Завдання 2. На відображення (reflection) та атрибути.</h5>
<p>
За допомогою відображень вивести на екран весь клас Parking (розроблений в Уроці 3, завдання 3) в розрізі, тобто список його членів, методів тощо. За допомогою обраного користувачем конструктора сконструювати об'єкт та "програти" для нього методи даного класу.</p>
<p>По бажанню добавте в клас Parking атрибут для класу, який буде містити інформацію про тип автостоянки: стоянка для вантажних чи легкових авто, депо тощо. А для метода Print() атрибут, який буде вказувати на необхідність друку машин на автостоянці, тобто виводити лише інформацію про парковку, список машин на ній чи всю інформацію.</p>
<p>
Серіалізувати всю інформацію (крім даних про колір машин) про автостоянку в XML-файл "parking.xml". Передбачити, щоб номер машини зберігався в якості атрибута (в елементі марки авто).</p>
</lesson>