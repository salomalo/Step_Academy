<?xml version="1.0" encoding="windows-1251" ?>
<?xml:stylesheet type="text/xsl" href="common/layout.xsl" ?>

<lesson title="ООП" next="section18HC.xml" prev="section12C.xml" summ="1">

<h2>17HС. Домашні завдання по курсу ООП</h2>
  <h3>Урок 1. Класи. Конструктори та деструктори. Конструктори з параметрами. Розбивка по файлам. Постійні методи класу. </h3>
  <h5>Завдання 1</h5>
<p>Написати клас, який описує цифровий лічильник. Лічильник – це змінна з обмеженим діапазоном, значення якої скидається, коли воно досягає певного максимуму (наприклад, counter приймає значення в діапазоні 0..5). Необхідно забезпечити:<br/>
    -	Можливість встановлення максимального та мінімального значень.<br/>-	Збільшення лічильника на 1.<br/>
    -	Повернення поточного значення.<br/>-	Використати постійні методи там, де це необхідно.
  </p>
  <h5>Завдання 2</h5>
  <p>
    Створити клас Group, що містить в собі наступні поля:<br/>
    -	назва групи<br/>-	курс<br/> -	назва спеціальності (char *)<br/>-	масив студентів, що також описаний окремим класом Student
  </p><p>
    Даний клас містить набір методів, що дозволяють:<br/>
    -	здійснити модифікацію окремих полів класу (назви групи, курсу та спеціальності)<br/>-	вивести інформацію про групу вцілому<br/> -	змінювати інформацію про студентів.
  </p>
<hr />
  <h3>Урок 2. Вказівники на об’єкти. Об’єкти та масиви об’єктів в області динамічної пам’яті. Масиви вказівників. Постійні в якості вказівників на методи класу. Вказівник this. Вказівники на функції-члени класу. Об’єкти в якості аргументів та повертаємих значень методів класу. Конструктор копій
</h3>
  <h5>Завдання 1</h5>
  <p>Створити клас Employee, що містить в собі:<br/>
-	номер працівника;<br/>-	ім'я (char*);<br/>-	оклад<br/>-	телефонний номер (char*);<br/>-	дата прийому працівника на роботу (клас Date (month, day, year, SetDate() та ShowDate()  в форматі 12/12/1200));<br/>
    -	статус працівника (перечисляєма константа etype: лаборант, бухгалтер, секретар...).
  </p>
     <p>Клас повинен також містити необхідний набір конструкторів, стандартних методів доступу до полів класу, а також метод Print(), який виводить відформотовані дані про працівника на екран.</p>
<p>
    <b>Вимоги:</b><br/>
    -	змінна, що містить інформацію про телефонний номер, повинна бути динамічною, тобто зберігати свої дані в кучі;<br/>
    - необхідно створити динамічний масив працівників;<br/>-	в методі Print явно використати вказівник this.
  </p>
 <h5>Завдання 2</h5>
  <p>Необхідно створити клас Monitor, який повинен містити:<ol>
<li>поля:<ul>
<li>технічні характеристики (тип, роздільна здатність, розмір тощо);</li>
<li>ціна монітору.</li>
</ul></li>
<li>методи:<ul>
<li>Конструктор по замовчуванню та з параметрами;</li>
<li>Стандартні методи доступу до полів класу;</li>
<li>Методи для встановлення значень в поля класу;</li>
<li>Метод для виведення полів класу на консоль.</li>
</ul></li></ol>
В основній програмі реалізувати можливість здійснення наступних дій:
<ul>
<li>створити мінімум 4 об’єкти класу Monitor;</li>
<li>зробити пошук монітора по заданих характеристиках;</li>
<li>підрахувати та вивести окремі ціни та загальну вартість всіх моніторів на екран.</li>
</ul>
Об’єкти класу повинні створюватись різними способами:
<ul>
<li>мінімум один з об’єктів конструктором по замовчуванню і встановлення значень полів для даного об’єкта через методи (set);</li>
<li>мінімум один об’єкт через конструктор з параметрами.</li>
</ul></p>
 <h5>Завдання 3</h5>
<p>
Написати програму роботи з поїздами, на основі класу Train ("Поїзд"). Програма пропонує ввести з клавіатури:<ul><li>Кількість поїздів;</li>
<li>Кількість вагонів для кожного поїзда.</li></ul>

На основі ведених даних створюються поїзди, виводиться загальна інформація про них та набір наступних звітів:<ol>
<li>Поїзд в якому їхала найбільша кількість пасажирів.</li>
<li>Поїзд в якому їхала найменша кількість пасажирів.</li>
</ol>

Клас Train повинен містити:<ol>
<li>поля:<ul>
<li>номер поїзда;</li>
<li>назва поїзда (сполучення наприклад "Львів - Київ");</li>
<li>поле "вагон" - вказівник на тип int, якому буде виділятися динамічна пам'ять розміром в кількість вагонів, де індекс даного масиву вказує на номер вагону, а значення комірки масиву на кількість пасажирів у вагоні;</li>
<li>кількість вагонів.</li>
</ul></li>
<li>методи:<ul><li>Конструктор по замовчуванню;</li>
<li>Конструктор з параметрами;</li>
<li>Конструктор копіювання;</li>
<li>Стандартні методи доступу до полів класу;</li>
<li>Метод для виведення інформації про поїзд:<ul>
<li>Загальна кількість пасажирів.</li>
<li>Загальна кількість вагонів.</li>
<li>Номер вагону в якому їхала найменша кількість пасажирів</li>
<li>Номер вагону в якому їхала найбільша кількість пасажирів.</li>
</ul>
</li>
<li>Метод для пошуку максимального елемента поля (вагон);</li>
<li>Метод для пошуку мінімального елемента поля (вагон);</li>
<li>Метод для пошуку суми значень елементів поля (вагон).</li>
</ul></li>
</ol>
</p>
<h5>Примітки!</h5>
<p>Завдання 3 оцінюється окремо по 12 бальній системі</p>
<hr/>
  <h3>Урок 3. Перевантаження операторів. Перевантаження арифметичних операцій та оператора присвоєння. Перевантаження логічних операцій та операцій порівняння. Перевантаження оператора неявного приведення до типу</h3>
  <h5>Завдання 1</h5>
  <p>Створіть клас Date, який буде містити інформацію про дату (день, місяць, рік). За допомогою механізму перквантаження операторів, визначіть:<br/>
    -	операцію різниці між двома датами (результат в вигляді кількості днів між датами);<br/>
  -	операцію збільшення дати на певну кількість днів;<br/>-	операцію збільшення дати в певну кількість раз ( * );<br/>
    -	операцію знаходження суми дат ( + );<br/>-	операцію, яка дозволить перевстановити дату ( = ).<br/>
   Всю роботу організувати через систему меню.
  </p>
  <h5>Завдання 2</h5>
  <p>
Реалізувати клас <b>var («Універсальна змінна»)</b>. Об’єкти екземпляра цього класу можуть зберігати в собі значення наступних типів: int, double, XString (рядок, – створений вами клас). Наприклад:
<example>
void main()
{
	var a = 15;
	var b = “Hello”;
	var c = 7.8;
	var d = “50”;
	b = a + d;
	b.Show();		//отримаємо 65
	<![CDATA[  
	if (a == b) cout << “Equal”<<endl; 
	else cout << “Not Equal”<<endl;]]>
}
</example>
</p><p>
Для класу var необхідно перевантажити:<ul><li>арифметичні оператори: +, -, *, /, +=, -=, *=, /=</li>
<li>оператори порівняння: <![CDATA[  <, >, <=, >=, ==, != ]]></li></ul>
Додати також до класу var приведення до типу: int, double, char*.</p>

<h5>Основні моменти:</h5>
<p>В змінній типу var в довільний момент часу може знаходитись лише одне значення (int або double, або ХString).</p>
<p>При перевантаженні операторів слід врахувати наступне: якщо при виконанні операції типи значень двох операндів типу var різні, тоді необхідно приводити (конвертувати) значення другого операнда до типу значення першого операнда і тільки після цього виконувати операцію. При цьому значення і тип другого операнда в самому об’єкті var не змінюється. Наприклад:
<example>
	var a = 10, b = “120”, c;
	c = a + b;
	c.Show();		//отримаємо 130
	c = b + a;
	c.Show();		//отримаємо “12010”
</example>
Для типу XString:<ul><li>операція * повинна повертати новий рядок, який утворюється шляхом перетину двох рядків, тобто їх спільні символи. Наприклад, результатом перетину рядків "Microsoft" та "Windows" буде рядок "ioso".</li>
<li>операція / повинна повертати новий рядок, який утворюється шляхом відбору символів першого рядка, яких немає в другому. Наприклад, результатом ділення рядка "Microsoft" на "Windows" буде рядок "Mcrft".</li>
<li>операцію + , що дозволяє додати два рядки – конкатенація рядків.</li>
<li>операцій *=, /= та +=, які діють по вищеописаному принципу.</li>
<li>оператор ! (NOT), що дозволить здійснити реверс рядка.</li>
</ul></p>
<hr/>
  <h3>Урок 4. Дружні конструкції. Перевантаження операторів направлення потоку<![CDATA[ ( >>, << ) та індексування ( [ ] ).]]></h3>
  <p>Створити клас Vector, який має два змінних-члени: сам вектор (double*) та його розмір. Даний клас має наступні методи:<br/>
    -	Стандартний конструктор;<br/>
  -	Перевантажений конструктор, який забороняє неявне приведення до типу та дозволяє задавати розмір вектора;<br/>
  -	Конструктор, що дозволяє ініціалізувати вектор іншим масивом;<br/>
  -	Конструктор копій;<br/>
  -	Деструктор;<br/>
  -	Функція, що вираховує довжину вектора;<br/>
    -	Збільшення всіх елементів вектора на 1 ( ++ ) (постфікс та префікс). Причому перевантаження префіксного інкремента організувати поза межами класу;<br/>
  -	Зменшення всіх елементів вектора на 1 ( -- ) (постфікс та префікс). Причому перевантаження постфіксного декремента організувати поза межами класу;<br/>
  -	Присвоювання вектора;<br/>
  -	Метод, що дозволяє доступатись по індексу ( [ ] );<br/>
  -	Методи додавання та віднімання двух векторів (+, -, +=, - =);<br/>
  -	Методи додавання та віднімання до/від вектора числа (+, -, +=, - =);<br/>
  -	Множення двух векторів та множення вектора на число;<br/>
  -	Введення та виведення вектора <![CDATA[(<<, >>)]]>;<br/>
  -	Метод,що повертає розмірність вектора;<br/>
  -	Методи, що дозволяють порівнювати два вектори (оператори порівняння та логічні оператори).<br/>
  - перевантажити оператор виклику функції, що дозволить обновляти об’єкт значеннями нового масиву (дана операторна функція повинна містити два параметри – масив типу double* та його розмір).
  </p>

  <p>Доповнити створений раніше клас Vector статичною змінною-членом класу, що буде підраховувати кількість векторів, та статичним методом класу, що дозволить отримати дані з статичної змінної.</p>
<hr />
<h3>Урок 5. Статичні члени та методи класу. Перевантаження операторів: виклику функцій ( ( ) ), new, delete, new [], delete [], * (розіменування), -> (доступу по вказівнику)</h3>
  <p>Створити клас для роботи з матрицями. Передбачити функції для додавання ( + ), множення двох матриць ( * ), транспонування матриць ( ! ), присвоєння матриць одна одній, встановлення та отримання довільного елемента матриці. Необхідно перевантажити відповідні оператори</p>
  <hr/>
  <h3>Урок 6. Динамічні структури даних. Стек. Черга: проста, кільцева, з пріоритетами та двухстороння.</h3>
  <h5>Завдання 1</h5>
  <p>Створити імітацію гри "однорукий бандит". Наприклад, при натисненні кнопки "Enter" відбувається "обертання" трьох барабанів (кількість обертів кожного з них обирається довільно), на яких зображені різні значки; і якщо випадає певна комбінація, то гравець отримує довільний виграш.</p>
<p><b>Один з прикладів реалізації алгоритму:</b> Початкова кількість очків 1000. У випадку співпадіння трьох значень – виграш +1000 оч., двох – виграш +200, у всіх інших випадках знімається 100 оч. Якщо у користувача кількість очків стає рівна нулю – гра закінчується і виводиться питання: "Перезапустити гру?"</p>
  <p><b>Примітка.</b> Реалізація барабанів може бути основана на одному з розглянутих динамічних структур: стек або кільцева черга</p>
<p><b>Приклади реаізації програми:</b><br />
<img src="images\BlackJack_1.jpg" width="50%" align="left"/><img src="images\BlackJack_2.jpg" width="100%" />
</p><br clear="all" />
<p><img src="images\BlackJack_3.jpg" width="50%" align="left"/><img src="images\BlackJack_4.jpg" width="100%" /></p>
<br clear="all" />
  <h5>Завдання 2</h5>
  <p>написати програму, яка імітує чергу друку принтера (Клас «Принтер»). В програмі повинні бути наявні певні документи (клас «Документ»), які стають в чергу на друк. При цьому, кожен документ повинен мати свій пріоритет, який визначає його порядок в черзі. Необхідно зберігати статистику друку (документ, час) в окремій черзі. Передбачити вивід статистики на екран.</p>
  <hr/>
<h3>Урок 7. Динамічні структури даних. Списки. Двійкові дерева.</h3>
<h5>Завдання 1</h5>
<p>Побудувати клас для роботи з однозв’язним списком. Елемент списку містить наступну інформацію про автобус: 
<ol><li>номер автобуса;</li> 
<li>прізвище та ініціали водія; </li>
<li>номер маршруту. </li></ol>

Програма повинна забезпечувати: <ol><li>початкове формування двох списків: <ul><li>з даними про автобуси, які знаходяться в автопарку; </li>
<li>з даними про автобуси, які знаходяться на маршрутах.</li></ul>
При виїзді кождого автобуса з парку вводиться номер автобуса, і програма видаляє дані про цей автобус з списку автобусів, які знаходяться в автопарку, та записує ці дані в список автобусів, які знаходяться на маршруті.</li>
<li>аналогічна операція виконується для списків, якщо якийсь автобус повертається в автопарк;</li>
<li>по запиту видіються відомості про автобуси, які знаходяться в автопарке або на маршруті.</li>
</ol>
</p>
<h5>Завдання 2</h5>
<p>
Побудувати клас для роботи з бінарним деревом, який містить англо-російський або англо-український словник. Кожен вузол містить додатково лічильник звернень до слова в даному вузлі. В процесі експлуатації словника при кожному виклику слова в лічильник звернень додається одиниця.</p>
<p>
Написати програму, яка:<ol><li>забезпечить початкове введення словника з конкретними значеннями лічильника звернень;</li>
<li>формує нове представлення словника у вигляді бінарного дерева у відповідності до частоти звернень до слова;</li>
<li>здійснює вивід початкового і нового представлення словника.</li></ol>

Програма також надає інтерфейс типу «меню» та виконує пошук по вказаному ключу.</p>
<hr/>
<h3>Урок 8. Шаблони класів. Простори імен. Препроцесор</h3>
<h5>Постановка задачі</h5>
<p>Є магазин "Веселка". В даному магазині продається наступна продукція:<ul><li>книжки;</li><li>журнали;</li><li>аудіо диски.</li></ul>
Всі три види продукції представлені відповідними класами: Книга (Book), Журнал (Megazine), Аудіо диск (Audio). 
Програма має виводити наступні результати:<ol>
<li>Виводити інформацію про всі книги, журнали і/або аудіо диски.</li>
<li>Виводити інформацію про найдорожчу книжку, журнал і/або аудіо диск.</li>
<li>Виводити інформацію про найдешевшу книжку, журнал і/або аудіо диск.</li>
<li>Виводити середню ціну книг, журналів і/або аудіо дисків.</li>
<li>Виводити нові книги,  журнали і/або аудіо диски.</li>
</ol>
</p>
<h5>Хід розв’язку задачі</h5>
<p>
Необхідно створити шаблонний <b>клас "Масив"</b>, який має забезпечити роботу з масивом будь-якого типу та містить:<ol><li>поля:<ul><li>вказівник на тип масиву;</li>
<li>розмір масиву.</li></ul></li>
<li>дадаткові методи:<ul>
<li>пошук мінімального та максимального елемента масиву;</li>
<li>метод для сортування елементів масиву по зростанню або спаданню;</li>
<li>метод для пошуку середньо арифметичного всіх елементів масиву;</li>
<li>перенавантажити оператор індексування.</li>
</ul>
</li>
</ol>
Необхідно також створити наступний <b>набір класів</b>:<ol><li>Книгa (Book), яка містить наступні поля:<ul><li>назва книги;</li>
<li>видавництво;</li>
<li>автор;</li>
<li>ціна;</li>
<li>булівське поле, яке вказує чи книга є нова: true – нова, false – ні.</li>
</ul></li>
<li>Журнал (Megazine), який містить наступні поля:<ul><li>назва журналу;</li>
<li>ціна;</li>
<li>булівське поле, яке вказує чи журнал є новим: true – новий, false – ні.</li></ul></li>
<li>Аудіо диск (Audio), який має містити наступні поля:<ul><li>назва диску;</li>
<li>виконавець;</li>
<li>кількість треків;</li>
<li>ціна;</li>
<li>булівське поле, яке вказує чи аудіо диск є новим: true – новий, false – ні.</li></ul></li>
</ol>
Для кожного класу написати необхідний набір методів, а також перевантажити наступні оператори: &lt;, &gt;, !=, ==,  =, +, +=. Крім того, класи "Журнал" та "Книга" повинні бути розміщені в окремому просторі імен <b>publishing</b>.
</p><p>
В основній програмі, створити 3 об’єкти шаблонного класу "Масив" для допустимих в програмі типів (Книги, Журнал, Аудіо диски). Кожен параметричний обєкт доповнити мінімум 3-ма елементами відповідного класу, заповнити масив необхідною інформацією та вивести її на консоль. А також виконати всі завдання вказані в постановці задачі.</p>
<hr/>
<h3>Урок 9. Файли. Робота з файлами засобами С. Аргументи командного рядка</h3>
  <h5>Завдання 1</h5>
  <p>Створити телефонний довідник, який здійснює наступні операції:
  <ul>
    <li>Додавання абонентів в базу.</li>
    <li>Видалення абонентів з бази.</li>
    <li>Модифікація даних абонента.</li>
    <li>Пошук абонентів по телефонному номеру або прізвищу.</li>
    <li>Друк в алфавітному порядку абонентів з заданого діапазону номерів або прізвищ; наприклад, для номерів діапазону можу бути: 222222 - 333333, а для прізвищ: Іванаускас - Іванов (тобто Іванова в діапазон не входить).</li>
    <li>Можливість збереження знайденої інформації в файл.</li>
    <li>Збереження бази в файл.</li>
    <li>Завантаження бази з файла.</li>
  </ul>
    А також додати до програми можливість видалення та переіменування вказаного користувачем файла.
  </p>
  <h5>Завдання 2</h5>
  <p>Написати програму, яка відкриває текстовий файл, імя якого береться з командного рядка. Організувати цикл, який запитує в користувача позицію в файлі, після чого програма повинна роздрукувати частину файла, починаючи з введеної позиції і до наступного символа нового рядка. Цикл закінчується, коли вводиться нечисловий символ.</p>
  <hr/>

  <h3>Урок 10. Файли. Файлові потоки введення/виведення</h3>
  <h5>Завдання 1</h5>
  <p>1.	Написати програму, яка дозволяє записувати в файл інформацію про результати (оцінки) 5 екзаменів студента на літній сесій. Організувати зчитування даної інформації з файлу та підрахунок середнього балу студента за дану сесію.</p>
  <h5>Завдання 2</h5>
  <p>Описати клас Employee, який містить наступні наступні змінні та методи:
  <ul>
    <li>ім.’я та прізвище працівника;</li>
    <li>стаж роботи;</li>
    <li>стандартні методи доступу до полів класу.</li>
    </ul>
    Створити масив працівників та забезпечити можливість запису БД працівників в файл та зчитування з файлу.
    <b>Додатково (на 12 балів).</b> Організувати видалення інформації про працівників з файлу з встановленої позиції.
  </p>
  <hr/>
 <h3>Урок 11. Успадкування. Одиничне успадкування</h3>
  <h5>Завдання 1</h5>
  <p>Створіть клас Passport (паспорт), який буде містити паспортну інформацію про громадянина України. За допомогою механізму успадкування, реалізуйте клас ForeignPassport (закордонний паспорт) похідний від Passport. Нагадаємо, що закордонний паспорт містить окрім паспортних даних, також дані про візи, номер закордонного паспорта.</p>
<p>Для віз можна скористатись вже розробленою на попередніх домашніх завданнях структурою даних "Список". Віза містить назву країни та дату дії візи).</p>
  <h5>Завдання 2</h5>
<p>Описати базовий клас "Рядок" або скористатись вже розробленим на попередніх ДЗ. Крім основних методів він повинен містити:
<ol>
<li>оператор присвоєння;</li>
<li>очистка рядка (зробити її пустою);</li>
<li>конкатенація рядків (перевантажені оператори + і +=);</li>
<li>перевірка на рівність (= =) і на нерівність (!=).</li>
</ol>
Описати клас <b>"Бітовий рядок"</b> похідний від класу "Рядок" (рядки даного класу можуть містити лише символи ‘0’ і ‘1’). Якщо в основі ініціалізуючого рядка зустрічаються недопустимі символи, то "Бітовий рядок" стає пустим. Вміст рядка розглядається як двійкове представлення цілого числа з знаковим розрядом. Від'ємні числа зберігаються в додатковому коді.</p>
<p>
Додаткові методи класу "Бітовий рядок":<ol><li>оператор присвоєння;</li>
<li>зміна знаку числа (переведення числа в додотковий код);</li>
<li>складання бітових рядків (перевантажені оператори + і +=);</li>
<li>перевірка на рівність (= =) і на нерівність (!=).</li></ol>
</p>
  <hr/>
<h3>Урок 12. Множинне успадкування. Раннє та пізнє зв’язування. Віртуальні методи класу</h3>
<p>Побудувати систему класів для опису плоских геометричних фігур:
<ol><li>Square - квадрат, який характеризується координатами лівого верхнього кута і довжиною сторони;</li>
<li>Rectangle - прямокутник з заданими координатами верхнього лівого кута і розмірами;</li>
<li>Circle - коло з заданими координатами центру і радіусом;</li>
<li>Ellipse - еліпс з заданими координатами верхнього кута описаного навколо нього прямокутника з сторонами, паралельними осям координат, і розмірами цього прямокутника. Фактично необхідно описати клас еліпса, який вписаний в прямокутник.</li>
</ol>
При цьому базовим класом для всіх класів фігур являється клас Point (точка). Цей клас повинен містити наступні методи, які успадковуються всіма спадкоємцями:
<ul>
<li>Переміщення на площині;</li>
<li>Поворот на 90 градусів вправо/вліво.</li></ul>

В похідних класах реалізувати:
<ul>
<li>метод порівняння двох об'єктів по площі. Для цього перевантажити операцію ( = = );</li>
<li>перевантажити операції вводу/виводу як дружні;</li>
<li>при необхідності додати в класи інші методи.</li>
</ul>
</p>
<hr/>
 <h3>Урок 13. Віртуальний та абстрактний базовий клас. Виключення. </h3>
<p>
Модифікуйте розроблену у попередньому ДЗ програму, яка працює з геометричними фігурами, зробивши клас Shape абстрактним. Доповніть його наступними віртуальними методами:
<ul><li>save() - збереження фігури в файл;</li>
<li>load() - зчитування фігури з файлу.</li></ul>
Створіть масив фігур, збережіть їх файл, завантажте в інший масив і відобразіть інформацію про кожну з фігур.</p>
<p>Передбачте у програмі, щоб у випадку виникнення помилок (наприклад, при зчитуванні або записі у файл, виділенні памяті тощо) генерувались відповідні виключення.</p>
<hr/>

  <h3>Урок 14. STL</h3>
  <h5>Завдання 1</h5>
  <p>Написати реалізацію класу stack на основі елементів типу double</p>
  <h5>Завдання 2</h5>
  <p>Написати реалізацію класу queue на основі елементів типу string</p>
  <h5>Завдання 3</h5>
  <p>Створити multimap та multiset на основі елементів типу класу CPerson, що містить в своєму класі наступні обов’язкові члени: ім’я, вік, назва посади на підприємстві, назва відділу, в якому працює. Вимоги: обов’язково реалізувати пошук по будь-якій з ознак та обов’язковим є наявність меню в програмі</p>
  <h5>Завдання 4</h5>
  <p>Придумати та реалізувати довільний унарний та бінарний функтор</p>
</lesson>