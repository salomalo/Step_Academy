<?xml version="1.0" encoding="windows-1251" ?>
<?xml:stylesheet type="text/xsl" href="common/layout.xsl" ?>

<lesson title="Win32API та MFC" next="index.xml" prev="section8C.xml" summ="1">

<h2>17HС. ДЗ по курсу Win32API</h2>
  <h3>Урок 1. Перше вікно для Windows.</h3>
  <h5>Завдання 1</h5>
<p>Написати програму, яка вгадує задумане користувачем число від 1 до 100. Для запиту до користувача використовуються вікна повідомлень. Після того, як число відгадано, необхідно вивести кількість спроб, які для цього знадобились і надати користувачу можливість зіграти ще раз, не завершуючи програму. Вікна повідомлень оформити кнопкам та іконками. Основне вікно програми являється необовязковим.</p>
  <h5>Завдання 2</h5>
  <p>Написати програму, в якій при натисненні довільної клавіши на вікні запускається тест, який містить мінімум 3 запитання. Для запиту до користувача використати MessageBox. Після проходження тесту на вікні виводиться результат здачі тесту. Наприклад: <br/> <img src="images/test_1.gif" width="70%" /></p>
  <hr/>

 <h3>Урок 2. Введення в GDI. Шрифти та робота з текстом. Примітиви та обєкти GDI перо (pen) та пензлик (brush). Клас CImage. Контекст пам'яті.</h3>
  <h5>Завдання 1</h5>
  <p>Створити два градієнтні пензлі (brush), якими зафарбувати дві довільно обрані замкнуті області (сегмент, прямокутник тощо). Градієнти можуть бути довільні: діагональний, від центру тощо. Наприклад:<br/>
<img src="images/gradient.gif" width="600px" /></p>
  <h5>Завдання 2</h5>
  <p>За допомогою засобів GDI створити табличку 5*5 прямокутників. Зафарбувати їх кольорами, які обираються за допомогою генератора випадкових чисел (рандомайзом) та на кожному прямокутнику вивести надпис – колір прямокутника в 16-вій системі числення. (ПРИМІТКА. Аналог таблиці кольорів в графіці). Наприклад:<br/>
<img src="images/colortable.gif" width="550px" align="left" /> <img src="images/colortable2.gif" width="500px" /></p>
<p><br clear="both" /></p>
<h5>Завдання 3 (додаткове завдання)</h5>
<p>Написати мультфільм на довільну тему. Приклад базового файла bmp, який визначає кадри мультфільму наведений нижче:<br/>
<img src="images/mult.bmp" /></p>
<p><b>Примітка!</b> Дане завдання являється необовязковим. За його виконання студент отримує додаткових 12 балів.</p>
<hr/>

  <h3>Урок 3. Основні поняття про клавіатуру. Повідомлення миші, пов’язані з робочою та неробочою областю вікна</h3>
  <h5>Завдання 1 (на вибір)</h5>
<h5>на 9 балів:</h5>
  <p>Написати програму з наступними вимогами:<br/>
    <ol>
	<li>При натисненні на клавішу Enter вікно вашої програми позиціонується в лівий верхній кут екрану з розмірами 300х300.</li>
      <li>За допомогою клавіш управління курсором здійснюється переміщення вікна.</li>
      <li>При натисненні комбінації клавіш, наприклад <![CDATA[ <Alt+VK_xxx> ]]>, ваше вікно починає переміщуватись по периметру екрана з певною швидкістю.</li>     
      <li>Натиснення клавіші Esc відміняє переміщення вікна.</li>
    </ol>
  </p>
  <h5>на 12 балів:</h5>
  <p>Написати програму, яка здійснює ефект "світломузики" для клавіш-перемикачів (Caps Lock, Num Lock, Scroll Lock).</p>
  <h5>Завдання 2</h5>
  <p>Гра – злови мене. На клієнтській області знаходиться зображення, яке на тік таймера довільно переміщується. Задача – Ви повинні мишкою зловити даний об’єкт, якщо зловили, то видається відповідне повідомлення.</p>
  <hr/>

  <h3>Урок 4. Використання ресурсів. Меню як ресурс. Акселератори. </h3>
  <p>Написати програму, в якій реалізувати систему головного меню з двох основних пунктів. <ol><li>Файл:<ul><li>укр./англ.<sup>*</sup></li><li>зміна курсора</li><li>сепаратор</li><li>вихід.</li></ul></li>
<li>Малювання:<ul><li>малювання іконки на клік мишки</li><li>малювання прямокутника на рух мишки (Solid або Hatch Brash)</li>
<li>малювання еліпса текстурним пензлем (Pattern (Texture) Brush);</li><li>малювання лінії.</li></ul></li>
</ol></p>
  <p>Всі ресурси (іконки, курсори тощо) повинні бути створені вами. А також необхідно додати акселератори на головне меню.</p>
<p><sup>*</sup> Передбачає зміну мови меню з української на англійську і назад. Для цього в програмі небхідно реалізувати два ідентичних меню, одне з яких містить англійські назви, а інше - українські. При старті програми завантажується українське меню. При виборі пункта меню "укр./англ." завантажується англомовне меню і навпаки. По суті, просто робиться підміна одного меню іншим.</p>
   <hr/>
  <h3>Урок 5. Модальні та немодальні вікна діалогу. Використання стандартних діалогових вікон. </h3>
<h5>Завдання 1</h5>
<p>Доповнити програму з ДЗ № 4 системним меню, в якому є додатковий пункт меню "Про програму" (About - модальний діалог) та "Зафарбовування вікна" (стандаpтне діалогове вікно)</p>
  <h5>Завдання 2</h5>
  <p>Доповнити програму також контекстним меню з наступними пунктами:<ul><li>Про програму (з’являється немодальне діалогове вікно About)</li><li>Сепаратор</li><li>Вихід</li></ul></p>
  <hr/>
 <h3>Урок 6. Основні поняття про елементи управління. Кнопки та елементи управління "текстове поле" та "список". Робота з файлами засобами Win32 API.</h3>
  <p>Написати блокнот-шифрувальник, який має вигляд звичайного блокноту з полем Edit та Menu.<br/>
   <ol start="1">
     <li>File: <ul><li>Open</li><li>Save</li><li>Save As...</li><li>Separator</li><li>Exit</li></ul></li>
     <li>Edit: <ul><li>Coder/Decoder</li><li>Clear (очистка вмісту текстового редактора)</li><li>Find and Replace <sup>*</sup></li><li>History <sup>**</sup></li></ul></li>
<li>View: <ul><li>Register (регістр)</li></ul></li>
     </ol>
Пункт <b>Register</b> дозволяє змінити регістр тексту в текстовому полі за допомогою відповідного діалогового вікна, яке містить допоміжну групу радіокнопок:<ul><li>Всі прописні літери</li><li>Всі заглавні літери</li>
    <li>Лише перша заглавна</li><li>Лише перша прописна</li></ul>
Орієнтовний вигляд даного діалогу:<br /><img src="images/register.gif" />
</p>
   <p><b><sup>*</sup></b> Пункт меню <b>Find and Replace</b> являється необов'язковим, але за його реалізацію оцінка за ДЗ - 12 балів. Без нього максимум 10 балів. В даному пункті необхідно самому створити аналог стандартного немодального діалогового вікна Find/Replace та реалізувати пошук і заміну слів або словосполучень. <br />
Орієнтовний вигляд даного діалогу:<br /><img src="images/FindReplace.gif" /></p>
<p><sup>**</sup>На пункт меню <b>History</b> відкривається діалогове вікно, в якому міститься список файлів, які колись кодувались/декодувались. При виборі одного із пунктів списку і натисненні на кнопку "Open" відкривається обраний файл.</p>
<p><b>Примітки!</b><ol><li>Прикріпіть до необхідних на вашу думку пунктів меню акселератори</li><li>Для кодування тексу можна використати XOR.</li><li>В допомозі можуть стати наступні повідомлення: EM_GETSEL, EM_SETSEL, EM_REPLACESEL, WM_CLEAR тощо.</li></ol></p>
  <hr/>
<h3>Урок 7. Багатозадачність та багатопоточність. Основні відомості про процеси та потоки. Бібліотека ToolHelp для Windows. Локальна пам’ять потоку (Thread Local Storage [TLS])</h3>
  <p>Написати програму-аналог taskmgr, яка дозволяє:
  <ul>
    <li>переглядати список активних процесів, разом з їх ідентифікаторами</li>
    <li>переглядати список потоків обраного процесу</li>
    <li>переглядати список модулів обраного процесу</li>
    <li>завершувати виконання обраного (-их) процесу. Для цього, необхідно список процесів, які мають бути закриті помістити в окремий список. Див. приклад нижче.</li>
  </ul>
  Існує також можливість:
  <ul>
    <li>Можливість змінювати пріоритет обраного процесу та пріоритети потоків в розрізі обраного процесу.</li>
    <li>Можливість призупиняти та відновлювати виконання обраного потоку.</li>
    <li>У відповідь на реакцію (наприклад, натиснення кнопки чи обрання відповідного пункту меню тощо) реалізувати створення нового потоку в середині того процесу, який є зараз активним. Потік може виконувати довільну дію.</li>
  </ul>
<b>Приклади реалізації Диспетчера задач:</b> <br /> <img src="images/TaskMgr.gif" width="40%"/></p>
<p>В даному прикладі, існує два списки: один відображає список активних процесів, а в інших за допомогою кнопок &lt;, &gt;, &lt;&lt;, &gt;&gt; переміщуються назви процесів, які потрібно завершити. Текстове поле дозволяє вказати назву процесу, яку потрібно запустити на виконання. Всі інші дії здійснюються за допомогою меню.</p>
<p>Прикладом вигляду може слугувати також класичний Task Manager ОС Windows, в якому додаткові дії виконуються за допомогою контекстного та головного меню.</p>
  <hr/>
<h3>Урок 10. Динамічно підключаємі бібліотеки (DLL). Явне та неявне звязування. Память DLL та файли визначення модуля (.def файли)</h3>
  <h5>Завдання 1</h5>
  <p>Розробити DLL, в якій реалізувати наступні функції Win32API для роботи з файловою системою:
<ul><li>функцію копіювання файлу (папки) з однієї папки в другу;</li>
<li>функцію переміщення файла (папки) з однієї папки в другу;</li>
<li>функцію видалення удалення файла (папки);</li>
<li>функцію подрахунку розміру папки.</li>
</ul>
Розробити два прикладних додатки, які використовують дану бібліотеку. При цьому:
<ul><li>перший використовує механізм явного зв'язування DLL</li>
<li>друга використовує механізм неявного зв'язування DLL</li>
</ul></p>
  <h5>Завдання 2</h5>
  <p>
Реалізувати функцію (в залежності від варіанту) бібліотеки kernel32.dll. <b>Вимога:</b> бібліотека з прикладною програмою зв'язується динамічно.<br/>
Варіанти реалізації функцій:
<ul>
<li>CreateDirectory</li>		
<li>GetFileAttributes</li>		
<li>GlobalAlloc</li>	
<li>FindFirstFile</li>
<li>GetComputerName</li>	
<li>WriteFile</li>	
<li>WinExec</li>
<li>ReadConsole</li>
<li>CompareString</li>
</ul>
<b>ПРИМІТКА! </b>Програма повинна бути написана на базі Win32API, крім випадку реалізації функції ReadConsole</p>
<h5>Завдання 3</h5>
<p>Написати DLL, яка має в памяті сектор, доступний для читання та запису іншим процесам. В цьому секторі розміщується масив з 10 елементів типу int.<br/>
В цій DLL також міститься три методи для роботи з даним масивом: <ul><li>FillArray для заповнення масиву, який йому передають</li><li>SortArray, що дозволяє відсортувати масив (експортуєма функція)</li><li>PrintArray, що виводить масив на екран(експортуєма функція)</li></ul>
Опис DLL здійснити за допомогою .def файла та директив препроцесора, які для цього призначені (в двох варіантах). <b>ПРИМІТКА!</b> Мінімум два методи повинні бути описані в .def файлі, а не за допомогою модифікаторыв _declspec(dllexport).
</p>
<p>Прикладна програма динамічно під'єднує бібліотеку, дає можливість користувачу заповнити масив, що належить DLL, а також за допомогою методів DLL SortArray та PrintArray сортує та виводить масив на екран.</p>
  <hr/>
  <h3>Урок 11. Мережеве програмування. Сокети</h3>
  <p>Написати простий чат. Чат може складатись окремо з серверної та клієнтської частини, або ж включати в себе і одну і другу частину.<br/>
Клієнтська частина чату обовязково повиннна містити:<ul><li> діалогове вікно реєстрації нового користувача при підключенні до сервера, </li><li>надавати список мережевих підключень користувачів, </li><li>містити область для написання власних повідомлень,</li><li>частину, де висвітлюються всі розмови між клієнтами чату</li></ul>
</p>
<p><b>ПРИМІТКА!</b> В випадку реалізації серверної частини окремо, допускається зробити її консольною.
</p>
</lesson>