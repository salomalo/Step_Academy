//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client_Proxy.ServiceReference2Async {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DiskResult", Namespace="http://schemas.datacontract.org/2004/07/MyDiskInfo")]
    [System.SerializableAttribute()]
    public partial class DiskResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FreeSpaceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TotalSpaceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FreeSpace {
            get {
                return this.FreeSpaceField;
            }
            set {
                if ((object.ReferenceEquals(this.FreeSpaceField, value) != true)) {
                    this.FreeSpaceField = value;
                    this.RaisePropertyChanged("FreeSpace");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TotalSpace {
            get {
                return this.TotalSpaceField;
            }
            set {
                if ((object.ReferenceEquals(this.TotalSpaceField, value) != true)) {
                    this.TotalSpaceField = value;
                    this.RaisePropertyChanged("TotalSpace");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference2Async.IGetDiskInfo")]
    public interface IGetDiskInfo {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetDiskInfo/Res", ReplyAction="http://tempuri.org/IGetDiskInfo/ResResponse")]
        Client_Proxy.ServiceReference2Async.DiskResult Res(string diskName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGetDiskInfo/Res", ReplyAction="http://tempuri.org/IGetDiskInfo/ResResponse")]
        System.IAsyncResult BeginRes(string diskName, System.AsyncCallback callback, object asyncState);
        
        Client_Proxy.ServiceReference2Async.DiskResult EndRes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetDiskInfo/ResRes", ReplyAction="http://tempuri.org/IGetDiskInfo/ResResResponse")]
        Client_Proxy.ServiceReference2Async.DiskResult ResRes(string diskName, string discSecond);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGetDiskInfo/ResRes", ReplyAction="http://tempuri.org/IGetDiskInfo/ResResResponse")]
        System.IAsyncResult BeginResRes(string diskName, string discSecond, System.AsyncCallback callback, object asyncState);
        
        Client_Proxy.ServiceReference2Async.DiskResult EndResRes(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGetDiskInfoChannel : Client_Proxy.ServiceReference2Async.IGetDiskInfo, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ResCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ResCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Client_Proxy.ServiceReference2Async.DiskResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Client_Proxy.ServiceReference2Async.DiskResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ResResCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ResResCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Client_Proxy.ServiceReference2Async.DiskResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Client_Proxy.ServiceReference2Async.DiskResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDiskInfoClient : System.ServiceModel.ClientBase<Client_Proxy.ServiceReference2Async.IGetDiskInfo>, Client_Proxy.ServiceReference2Async.IGetDiskInfo {
        
        private BeginOperationDelegate onBeginResDelegate;
        
        private EndOperationDelegate onEndResDelegate;
        
        private System.Threading.SendOrPostCallback onResCompletedDelegate;
        
        private BeginOperationDelegate onBeginResResDelegate;
        
        private EndOperationDelegate onEndResResDelegate;
        
        private System.Threading.SendOrPostCallback onResResCompletedDelegate;
        
        public GetDiskInfoClient() {
        }
        
        public GetDiskInfoClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GetDiskInfoClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GetDiskInfoClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GetDiskInfoClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<ResCompletedEventArgs> ResCompleted;
        
        public event System.EventHandler<ResResCompletedEventArgs> ResResCompleted;
        
        public Client_Proxy.ServiceReference2Async.DiskResult Res(string diskName) {
            return base.Channel.Res(diskName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRes(string diskName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRes(diskName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Client_Proxy.ServiceReference2Async.DiskResult EndRes(System.IAsyncResult result) {
            return base.Channel.EndRes(result);
        }
        
        private System.IAsyncResult OnBeginRes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string diskName = ((string)(inValues[0]));
            return this.BeginRes(diskName, callback, asyncState);
        }
        
        private object[] OnEndRes(System.IAsyncResult result) {
            Client_Proxy.ServiceReference2Async.DiskResult retVal = this.EndRes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnResCompleted(object state) {
            if ((this.ResCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ResCompleted(this, new ResCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ResAsync(string diskName) {
            this.ResAsync(diskName, null);
        }
        
        public void ResAsync(string diskName, object userState) {
            if ((this.onBeginResDelegate == null)) {
                this.onBeginResDelegate = new BeginOperationDelegate(this.OnBeginRes);
            }
            if ((this.onEndResDelegate == null)) {
                this.onEndResDelegate = new EndOperationDelegate(this.OnEndRes);
            }
            if ((this.onResCompletedDelegate == null)) {
                this.onResCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnResCompleted);
            }
            base.InvokeAsync(this.onBeginResDelegate, new object[] {
                        diskName}, this.onEndResDelegate, this.onResCompletedDelegate, userState);
        }
        
        public Client_Proxy.ServiceReference2Async.DiskResult ResRes(string diskName, string discSecond) {
            return base.Channel.ResRes(diskName, discSecond);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginResRes(string diskName, string discSecond, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginResRes(diskName, discSecond, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Client_Proxy.ServiceReference2Async.DiskResult EndResRes(System.IAsyncResult result) {
            return base.Channel.EndResRes(result);
        }
        
        private System.IAsyncResult OnBeginResRes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string diskName = ((string)(inValues[0]));
            string discSecond = ((string)(inValues[1]));
            return this.BeginResRes(diskName, discSecond, callback, asyncState);
        }
        
        private object[] OnEndResRes(System.IAsyncResult result) {
            Client_Proxy.ServiceReference2Async.DiskResult retVal = this.EndResRes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnResResCompleted(object state) {
            if ((this.ResResCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ResResCompleted(this, new ResResCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ResResAsync(string diskName, string discSecond) {
            this.ResResAsync(diskName, discSecond, null);
        }
        
        public void ResResAsync(string diskName, string discSecond, object userState) {
            if ((this.onBeginResResDelegate == null)) {
                this.onBeginResResDelegate = new BeginOperationDelegate(this.OnBeginResRes);
            }
            if ((this.onEndResResDelegate == null)) {
                this.onEndResResDelegate = new EndOperationDelegate(this.OnEndResRes);
            }
            if ((this.onResResCompletedDelegate == null)) {
                this.onResResCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnResResCompleted);
            }
            base.InvokeAsync(this.onBeginResResDelegate, new object[] {
                        diskName,
                        discSecond}, this.onEndResResDelegate, this.onResResCompletedDelegate, userState);
        }
    }
}
