<?xml version="1.0" encoding="windows-1251" ?>

<!DOCTYPE page [
<!ENTITY nbsp "&#160;">
<!ENTITY пробел "&#160;">
<!ENTITY shy "&#173;">
<!ENTITY перенос "&#173;">
]>

<?xml:stylesheet type="text/xsl" href="../common/layout.xsl" ?>

<Урок xmlns="x-schema:Schema.xml" название="Хранимые процедуры."  предыдущий="index.xml" следующий="section02.xml" copyright="© 2005 Вадим Волянский, Алексей Туманов.">

<h1 style="color:maroon">Хранимые процедуры.</h1>

<p>
Представьте, что каждый день, по несколько раз вам приходится набирать один и тот же набор запросов, изменяя в нем несколько параметров, например критерий поиска. Конечно же, вы сохраните весь набор в текстовый файл, откуда и будете его копировать. SQL Server предоставляет вам очень мощный механизм хранимых процедур.
</p>

<p>
У вас может возникнуть вопрос, а почему бы не пользоваться Представлениями?
Есть несколько основных положительных моментов у хранимых процедур:
	<ol>
		<li>После первого выполнения, хранимая процедура компилируется, и код ее выполнения хранится в кэше в оперативной памяти, что очень повышает быстродействие выполнения хранимой процедуры относительно обычных запросов и представлений.</li>
		<li>Любой пользователь может получить доступ к хранимой процедуре, при этом он может не иметь права на работу с теми объектами, которые она в себя включает.</li>
	</ol>
</p>

<p>
Общий синтаксис:
</p>

<pre style="border-color=#FF0000">

Create Procedure имя_хранимой_процедуры

As

Запрос_SQL

</pre>

<p>
Чтобы потом ее вызвать, необходимо указать:
</p>

<pre style="border-color=#FF0000">

Execute имя_хранимой_процедуры

</pre>

<p>
Пример. Необходимо создать хранимую процедуру, выводящую на экран список студентов, не вернувших книги (база данных Library).
</p>

<pre>

Create Procedure Taken_books

As

Select students.firstname,students.lastname,books.name

From students,s_cards,books

Where students.id=s_cards.id_student and s_cards.id_book=books.id

and s_cards.datein is null

</pre>

<p>
Чтобы получить результат достаточно указать:
</p>

<pre>

Execute Taken_books

</pre>

<img src="img\pict1.jpg"></img>

<p>
Существует возможность передавать параметры в хранимую процедуру. Например. Нужно показать книги определенного автора, при этом имя автора необходимо передать при вызове. Чтобы указать передаваемые параметры и возвращаемое значение используется следующий синтаксис:
</p>

<pre>

Create Procedure имя_хранимой_процедуры

@аргумент1 тип_данных[=значение_по_умолчанию][Output],

@аргумент2 тип_данных[=значение_по_умолчанию][Output],

...

@аргументN тип_данных[=значение_по_умолчанию][Output]

As

Запрос_SQL

</pre>

<p>
Output определяет, что этот аргумент является возвращаемым значение этой ф-ции. Об этом чуть позже, пока разбираем передачу параметров.
</p>

<p>
Пример. Нужно показать книги определенной тематики, при этом шаблон названия тематики необходимо передать при вызове (многотабличная books).
</p>

<pre>

<pre style="border-color=#00FF00">
Create Procedure Books_By_Theme

@Name varchar(25)

As

	Select books.name, themes.name

	from books,themes

	where books.id_theme=themes.id and 

	themes.name like @Name
</pre>
Вызываем:
<pre style="border-color=#00FF00">

Execute Books_By_theme '[Г-М]%'

</pre>
</pre>

<p>
Получаем список книг, у которых первая буква в названии тематики лежит в диапазоне от Г до М.
</p>

<p>
Как видите, при вызове указывается передаваемый параметр. Если их несколько, то они перечисляются через запятую.
</p>

<p>
Существует служебная хранимая процедура, позволяющая просмотреть синтаксис запроса, который использовался для создания хранимой процедуры. Она называется SP_HELPTEXT.
</p>

<p>
Например:
</p>

<pre>

Execute sp_helptext Books_By_Theme

</pre>

<img src="img\pict2.jpg"></img>

<p>
Но иногда необходимо скрыть текст запроса от любопытных глаз. Для этого, при создании хранимой процедуры указывается ключевое слово 
WITH ENCRYPTION. Общий синтаксис:
</p>

<pre style="border-color=#FF0000">

Create Procedure имя_хранимой_процедуры

@аргумент1 тип_данных[=значение_по_умолчанию][Output],

@аргумент2 тип_данных[=значение_по_умолчанию][Output],

...

@аргументN тип_данных[=значение_по_умолчанию][Output]

With Encryption

As

Запрос_SQL

</pre>

<p>
При указании With Encryption текст хранимой процедуры шифруется, и просмотреть его нельзя ни при помощи хранимой процедуры sp_helptext ни при помощи Enterprise manager.
</p>

<h2 style="color=#0000FF">Возвращаемые значения</h2>

<p>
Существует возможность вернуть какие-либо значения из функции. Для этого существует несколько вариантов. Первый. Указать при определении параметров спецификатор OUTPUT у тех параметров, которые получат результат. Для начала необходимо научиться объявлять собственные переменные. Для этого используется следующий синтаксис:
</p>

<pre style="border-color=#FF0000">

Declare @имя_переменной тип_данных,

@имя_переменной2 тип_данных,

...

@имя_переменнойN тип_данных

</pre>

<p>
Чтобы записать значения в переменные используется следующий синтаксис:
</p>

<pre style="border-color=#FF0000">
<span style="color=#FF0000">ВНИМАНИЕ!!!</span>

Select имя_переменной1 = значение1, имя_переменной2 = значение2, ... имя_переменнойN = значениеN

<span style="color=#FF0000">Либо</span>

Set имя_переменной1 = значение1
Set имя_переменной2 = значение2
...
Set имя_переменнойN = значениеN

</pre>

<p>
Чтобы вызвать хранимую процедуру и получить возвращаемые значения используется следующий синтаксис: Предположим, что у хранимой процедуры 4 параметра и последних два нужно получить.
</p>

<pre style="border-color=#FF0000">
<span style="color=#FF0000">ВНИМАНИЕ!!!</span>

Execute имя_хранимой_процедуры значение1, значение2, имя_переменной1 <span style="color=#0000FF">Output</span>, имя_переменной2 <span style="color=#0000FF">Output</span>

</pre>

<p>
<span style="color=#FF0000">Если не указать <span style="color=#0000FF">Output</span>, то значения не сохраняться!!!</span>
</p>

<p>
Задание: Необходимо создать хранимую процедуру, которая вернет имя и фамилию студента, который взял наибольшее кол-во книг. Надеюсь, вы понимаете, что без представления здесь не обойтись.
</p>

<pre>
Создаем представление, которое определяет студентов и кол-во взятых каждым из них книг.
<pre style="border-color=#00FF00">
Create View MyView1
as
Select students.firstname,students.lastname,count(s_cards.id_book)as c
from students,s_cards
where students.id=s_cards.id_student
group by students.firstname,students.lastname
</pre>
Создаем хранимую процедуру:
<pre style="border-color=#00FF00">

Create Procedure Best_student @n varchar(25) output, @s varchar(25) output <span style="color=#008080">/*создаем хранимую процедуру с 
двумя параметрами, в которые будет записан результат.*/</span>

As

	Select @n=firstname,@s=lastname <span style="color=#008080">/*В переменные записываем интересующие нас значения.*/</span>

	from MyView1

	where c=(select max(c) from MyView1)

</pre>
Вызываем хранимую процедуру и показываем результат:
<pre style="border-color=#00FF00">

Declare @name varchar(25), @surname varchar(25) <span style="color=#008080">/*Объявляем две переменные для хранения 
результата хранимой процедуры*/</span>

Execute Best_Student @name output,@surname output <span style="color=#008080">/*Вызываем хранимую процедуру и 
получаем результат.*/</span>

Select 'Best student name: ',@name+' '+@surname <span style="color=#008080">/*Склеиваем две строки и показываем 
на экран результат.*/</span>

</pre>
</pre>

<p>Есть возможность узнать структуру хранимой процедуры, т.е. названия переменных и их типы данных, их порядок и пр. Для этого служит та же хранимая процедура SP_HELP но по отношению к хранимой процедуре.</p>

<p>
Пример:
</p>
<pre>

execute sp_help Best_student

</pre>

<img src="img\pict3.jpg"></img>

<p>
Второй вариант вернуть значение - использовать ключевое слово return. Тогда можно не указывать параметры, в которые будет записан результат. Но <b>при помощи return можно вернуть только одно целочисленное значение</b>.
</p>

<p>
Если вы хотите получить результат хранимой процедуры, возвращающей значение через return, необходимо использовать следующий синтаксис:
</p>

<pre style="border-color=#FF0000">

Declare @имя_переменной

Execute @имя_переменной = имя_хранимой процедуры  значение1, значение2 ... значениеN

Select 'Значение переменной = ', @имя_переменной

</pre>

<p>
Пример хранимой процедуры, складывающей 2 числа, переданных в качестве параметров.
</p>

<pre>
<pre style="border-color=#00FF00">

Create Procedure MySum @a int,@b int

As

Declare @s int

Set @s=@a+@b

return @s

</pre>
Вызов:
<pre style="border-color=#00FF00">

Declare @Summ int

Execute @Summ=MySum 1,25

Select 'Summa = ',@Summ

</pre>

</pre>

<img src="img\pict5.jpg"></img>

<p>
Пример. Необходимо создать хранимую процедуру, которая вернет кол-во взятых с библиотеки книг и преподавателями и студентами.
</p>

<pre>
<pre style="border-color=#00FF00">

Create Procedure Total_books_am <span style="color=#008080">--создаем хранимую процедуру</span>

AS
Declare @st_books_am int,
@tch_books_am int,
@total int

Select @st_books_am=count(s_cards.id_book) from s_cards <span style="color=#008080">--получаем кол-во книг, взятых студентами</span>
Select @tch_books_am=count(t_cards.id_book) from t_cards <span style="color=#008080">--получаем кол-во книг, взятых преподавателями</span>
Set @total=@st_books_am+@tch_books_am <span style="color=#008080">--сумируем полученные данные</span>

return @total <span style="color=#008080">--возвращаем полученную сумму</span>

</pre>
Вызов хранимой процедуры.
<pre style="border-color=#00FF00">

Declare @amm int

Execute @amm=Total_books_am

Select 'Total taken books ammount = ',@amm

</pre>
</pre>

<p>
Результат:
</p>

<img src="img\pict4.jpg"></img>

<p>
При работе с хранимыми процедурами, существует набор ограничений:
<ol>
	<li>В хранимой процедуре не может быть двух переменных с одним и тем же именем.</li>
	<li>В хранимой процедуре не может быть больше 1024 параметров.</li>
	<li>В хранимой процедуре нельзя использовать директивы:
	<ul>
		<li>Create View</li>
		<li>Create Procedure</li>
		<li>Create Trigger</li>
		<li>Create Role</li>
		<li>Create Rule</li>
		<li>Create Default</li>
	</ul>
	</li>
</ol>
</p>

<h2 style="color=#0000FF">Операторы ветвления.</h2>

<p>
При написании хранимых процедур можно использовать операторы ветвления. Это известные вам if, else if, else. Блоки, которые должны быть выполнены, заключаются между ключевыми словами Begin и End.
</p>

<p>
Есть специальная функция, позволяющая, изначально, выдавать сообщение об ошибке. Но ее очень удобно использовать для компоновки выводимой на экран строки. Она называется <b>Raiserror</b>.
</p>

<pre>

Raiserror ('строка со спецификаторами',степень_тяжести_ошибки,состояние_ошибки_на_момент_вызова, подставляемые_переменные);

/*Надеюсь вам это напомнило функцию printf.*/

В качестве спецификаторов может указываться:
<ol>
	<li>%d - целое число</li>
	<li>%s - строка</li>
	<li>%u - беззнаковое целое</li>
</ol>
Дробные, к сожалению, не поддерживаются.

Степень тяжести указывается в пределах от 0 до 25.
От 0 до 18 - могут указываться пользователями, а 

от 19 до 25 - критические ошибки, которые могут указывать только члены группы sysadmin.
В случае таких ошибок подсоединение клиента с сервером разрывается

Состояние_ошибки_на_момент_вызова
Должно быть указано значение от 0 до 127.

Подставляемые_переменные - те переменные, которые должны быть подставлены на место спецификаторов.
</pre>

<p>
Пример. Создаем хранимую процедуру, возвращающую максимальное из двух чисел.
</p>

<pre>
<pre style="border-color=#00FF00">
Create Procedure MyMax @a int, @b int
as

if(@a>@b)
return @a

else
return @b

</pre>
Вызов:
<pre style="border-color=#00FF00">

Declare @max int

Execute @max=MyMax 8, 9

raiserror('Max from %d and %d is %d',0,1,8,9,@max)<span style="color=#008080">--используем функцию для компонования строки</span>

</pre>

</pre>

<p>
<b>Результат:</b>
</p>

<img src="img\pict6.jpg"></img>

<p>
Пример. Необходимо написать хранимую процедуру, выводящую на экран книги и цены по указанной категории, при этом необходимо указывать направление сортировки. 0 - сортировка результата по цене по убыванию, 1 - по возрастанию, любое другое - без сортировки. (многотабличная Books).
</p>

<pre>
Создание хранимой процедуры:
<pre style="border-color=#00FF00">
Create Procedure MySort @i varchar(25), @c int
as
if(@c=0)
begin

select books.name,books.price
from books,press
where books.id_press=press.id and press.name like @i
order by 2 desc

end

else if (@c=1)
begin

select books.name,books.price
from books,press
where books.id_press=press.id and press.name like @i
order by 2 asc

end

else
begin

select books.name,books.price
from books,press
where books.id_press=press.id and press.name like @i

end
</pre>
Вызов.
<pre style="border-color=#00FF00">
Execute MySort 'BHV%' ,1
</pre>
</pre>
<p>
Получаем список книг, издательств BHV, отсортированный по цене по возрастанию
</p>

<h2 style="color=#0000FF">Цикл.</h2>

<p>
Еще одна возможность которая дана - использовать цикл while.
</p>

<pre style="border-color=#FF0000">

while (логическое_выражение)

begin

	тело

end

</pre>

<p>
Также внутри цикла можно использовать операторы Break и Continue, использующиеся в том случае, если необходимо внутри цикла перепроверить условие и относительно него либо закончить выполнение цикла (Break), либо его продолжить (Continue).
</p>

<p>
Пример на хранимую процедуру, которая считает сумму чисел в диапазоне, переданном ей в качестве параметров. (диапазон открытый).
</p>

<pre>
<pre style="border-color=#00FF00">
Create Procedure DistSum @a int, @b int

as

Declare @s int

Set @s=@a

while @a&lt;@b
begin
	Set @s=@s+@a+1
	Set @a=@a+1
end

return @s
</pre>
Вызов:
<pre style="border-color=#00FF00">
Declare @s int

Execute @s=DistSum 2,4

raiserror('Summa chisel v diapazone = %d',0,1,@s)
</pre>
</pre>

<p>
Результат:
</p>

<img src="img\pict7.jpg"></img>


</Урок>