<?xml version="1.0" encoding="windows-1251" ?>

<!DOCTYPE page [
<!ENTITY nbsp "&#160;">
<!ENTITY пробел "&#160;">
<!ENTITY shy "&#173;">
<!ENTITY перенос "&#173;">
]>

<?xml:stylesheet type="text/xsl" href="../common/layout.xsl" ?>

<Урок xmlns="x-schema:Schema.xml" название="Понятие Нормализации. Нормальные формы." 
предыдущий="section03.xml" следующий="section05.xml" copyright="© 2005 Вадим Волянский, Алексей Туманов.">
<h1 style="color:maroon">Понятие Нормализации. Нормальные формы.</h1>
<p>Рассмотрим подробней процесс проектирования базы данных. Итак, перед Вами стоит какая-то задача. 
Например, создать базу данных, в которой будет храниться какая-либо информация. Вы подумали... Создали базу данных.
Однако, после проделанной работы необходимо еще задуматься о том, является ли созданная база данных оптимально спроектированной, а может есть какая-то избыточность (например в двух таблицах повторяется одна и та же информация) и т.д.. Как проверить базу 
на оптимальность? Не стоит изобретать велосипед и  придумывать какие-то свои способы анализа.
Нужно просто воспользоваться так называемыми нормальными формами.
</p>

<h3>Первая нормальная форма.</h3>

<p>
Таблица находится в первой нормальной форме, если в ее ячейках хранятся атомарные значения (минимальные значения, описывающие данные)и в таблице нет повторяющихся (полностью идентичных) строк.
</p>

<p>
В принципе, любая таблица реляционной СУБД сразу находится в Первой Нормальной Форме.
</p>

<p>
Рассмотрим пример на базе данных CD, в которой хранится информация о сотрудниках и проданных ими дисках. Также там есть информация о группе, чей альбом был продан, о годе создания группы, а также о формате данных на проданном диске.
</p>


<p>
Как видите повторяющихся строк нет и в каждой ячейке хранятся атомарные значения. Соответственно эта таблица находится в первой нормальной форме.
</p>

<p>
Не сложно увидеть, что данные указаны в избытке, и поэтому можно сказать, что первой нормальной формы не достаточно для обеспечения оптимальности.
</p>

<p>
База данных находится во второй нормальной форме, если во всех существующих таблицах в полях, которые не являются частью составного первичного ключа, нет потенциальных первичных ключей (т.е. значений, которые можно вынести в отдельную таблицу, а на их место в начальной таблице подставить значения из созданной таблицы).
</p>

<img src="img\pict30.jpg"></img>

<p>
Т.о. необходимо разбить таблицу на несколько (произвести декомпозицию).
</p>

<img src="img\pict31.jpg"></img>

<p>
Теперь база данных находится во второй нормальной форме. Но давайте рассмотрим таблицу CD. В ней действительно нет полей, которые могут претендовать на то, чтобы быть вынесенными в другую таблицу, но ведь Year_band функционально зависит не от компакт диска, а от Групп (Bands). Поэтому необходимо еще раз произвести декомпозицию таблиц.
</p>

<p>
База данных находится в Третьей Нормальной Форме, если она находится во второй нормальной форме и в полях всех таблиц находятся значения, которые зависят от первичного ключа только своей таблицы.
</p>

<img src="img\pict32.jpg"></img>

<p>
Как видите, информация хранится без повторений и структура базы данных исключает все аномалии, которые могут возникнуть.
</p>

<p>
Обычно этого достаточно для нормального функционирования базы данных. Однако иногда еще выделяют Четвертую и Пятую нормальные формы.
</p>

</Урок>