<?xml version="1.0" encoding="windows-1251" ?>

<!DOCTYPE page [
<!ENTITY nbsp "&#160;">
<!ENTITY пробел "&#160;">
<!ENTITY shy "&#173;">
<!ENTITY перенос "&#173;">
]>

<?xml:stylesheet type="text/xsl" href="../common/layout.xsl" ?>

<Урок xmlns="x-schema:Schema.xml" название="Оператор SELECT" 
предыдущий="section11.xml" следующий="section05.xml" copyright="© 2005 Вадим Волянский, Алексей Туманов.">
<h2 style="color=maroon">Оператор SELECT.</h2>

<p>
Оператор Select служит для выборки данных. Общий синтаксис следующий:
</p>

<pre style="border:3px #FF0000 solid">
Select имя_поля1, имя_поля2, имя_поля3... имя_поляN <br/>
From имя_таблицы <br/>
[Where условие]
</pre>

<p>
Если имя поля состоит из нескольких частей, или оно совпадает с ключевым словом языка SQL, то нужно имя этого поля заключать в двойные кавычки!!!
</p>

<p>
Открываем Query Analizer. Выбираем требуемую базу данных (в нашем случае books) и пишем запрос.
</p>

<pre>
Select N, Name, Price, Izd, Themes<br/>From books
</pre>

<img src="img/pict20.jpg"></img>

<p>
Запустив этот запрос на выполнение, вы увидете результат запроса на выборку. Первое поле N - первичный ключ, второе Name - название книги, Price - цена книги, Izd - издательство, выдавшее книги, Themes - тематика. Как видите, результат вы получаете полностью в соответствии с запросом. 
</p>

<p>
Но не всегда удобно перечислять все имена полей, чтобы просмотреть все содержимое таблицы. Поэтому вместо перечисления столбцов можно указать *, определяющая, что нужны значения всех полей.
</p>

<pre>
Select * from books
</pre>

<p>
Именам полей, при вычитке, можно дать псевдоним. Например, чтоб вместо слова Name в заголовке было указано Название.
</p>

<p>
Для этого используется ключевое слово As. Общий синтаксис:
</p>

<pre>
Select имя_поля1 As 'Псевдоним1', имя_поля2 As 'Псевдоним2' <br/>
from имя_таблицы
</pre>

<p>Пример:</p>

<pre>
Select N as '№', Name as 'Название', Pages as 'Кол-во страниц'<br/>
From Books
</pre>

<img src="img/pict21.jpg"></img>

<p>
В запрос на выборку можно включать арифметические операции. Например, в базе хранится закупочная цена книг, а вам нужно показать цену, по которой вы их продаете (на 20% дороже, чем закупочная цена). Для этого достаточно выполнить такой запрос.
</p>

<pre>
Select N as '№', Name as 'Название', Pages as 'Кол-во страниц', Price*1.2 as 'Цена продажи'<br/>
From Books
</pre>

<p>
При вычитке, каждое значение в поле Price будет увеличено на 20%. (Содержимое базы данных не изменится!!!).
</p>

<img src="img/pict22.jpg"></img>

<p>
Все арифметические операции выполняются по математическим правилам. Т.е. сначала деление, умножение, а потом сложение, вычитание. Для изменения порядка выполнения операции используются ( ).
</p>

<h3 align='center'><font color="#1925AB">Добавление условий в запрос на выборку.</font></h3>

<p>
В любой запрос можно добавить проверку какого либо условия. Требуемое условие должно указываться поле ключевого слова Where.
</p>

<p>
Существуют следующие операторы сравнения, которые можно использовать в запросе:
</p>

<ul>
	<li>&lt; - меньше</li>
	<li>&gt; - больше</li>
	<li>&lt;= - меньше либо равно</li>
	<li>&gt;= - больше либо равно</li>
	<li>&lt;&gt; - проверка на неравенство</li>
	<li>= - проверка на равенство</li>
	<li>!&gt; - не больше чем</li>
	<li>!&lt; - не меньше чем</li>
	<li>is NULL - проверка на отсутствие записи</li>
</ul>

<p>
Например. Необходимо показать книги, у которых цена больше 50 рублей.
</p>

<pre>
Select *<br/>
From Books<br/>
Where Price>50
</pre>

<p>
Для объединения условий используются операторы объединения:
</p>

<ul>
	<li>and - логическое И (общее условие будет верным, только если все объединенные условия верны)</li>
	<li>or - логическое Или (общее верно, если хотя бы одно из объединяемых условий верно)</li>
</ul>

<p>
Вы должны помнить, что при объединении запросов каждый из них должен быть полным. Т.е. запрос типа:
</p>

<pre style="color=#FF0000">
Select *<br/>
From Books<br/>
Where Price&gt;50 and &lt;100
</pre>

<p>
выдаст ошибку, т.к. условие , стоящее после and указано не полностью. Чтобы этот запрос сработал необходимо написать:
</p>

<pre style="color=#FF0000">
Правильно!!!<br/>
Select *<br/>
From Books<br/>
Where Price&gt;50 and Price&lt;100
</pre>

<h3 align='center'><font color="#1925AB">Сортировка результата запроса на выборку.</font></h3>

<p>
Результат очень часто хочется видеть наглядным. Например, книги отсортированные по цене, либо по имени автора.
</p>

<p>
Для этого используется директива Order by. Сортировка может производиться как по возрастанию, так и по убыванию. По умолчанию установлена сортировка по возрастанию. Чтобы указать ее явно используется ключевое слово Asc. Для сортировки по убыванию указывается ключевое слово Desc. Существует 2 варианта написания директивы сортировки:
</p>
<ol>
<li>
	<pre>
Select имя_поля1, имя_поля2, имя_поля3<br/>
From имя_таблицы<br/>
Where условие<br/>
Order by имя_поля [Asc либо Desc]
	</pre>
</li>
<p>Имя поля нужно указывать из тех, которые присутствуют в Select.</p>
<li>
	<pre>
Select имя_поля1, имя_поля2, имя_поля3<br/>
From имя_таблицы<br/>
Where условие<br/>
Order by номер_поля [Asc либо Desc]
	</pre>
</li>
<p>Номер поля - порядковый номер поля, выводимого запросом.</p>
</ol>

<p>
Пример.
</p>

<pre>
Select Name,Price<br/>
From books<br/>
order by Price Desc
</pre>

<p>
Полный аналог этого запроса.
</p>

<pre>
Select Name,Price<br/>
From books<br/>
order by 2 Desc
</pre>

<img src="img/pict23.jpg"></img>

<p>
Как видите, результат выборки отсортирован по второму столбцу (т.е. по цене) по убыванию.
</p>

</Урок>