<?xml version="1.0" encoding="windows-1251" ?>

<!DOCTYPE page [
<!ENTITY nbsp "&#160;">
<!ENTITY пробел "&#160;">
<!ENTITY shy "&#173;">
<!ENTITY перенос "&#173;">
]>

<?xml:stylesheet type="text/xsl" href="../common/layout.xsl" ?>

<Урок xmlns="x-schema:Schema.xml" название="Использование ролей. Роли уровня приложения."  предыдущий="section03.xml" следующий="section05.xml" copyright="© 2005 Вадим Волянский, Алексей Туманов.">

<h1 style="color:maroon">Использование ролей. Роли уровня приложения.</h1>
<p>
Пришло время разобраться с понятием Ролей в SQL Server. Роль представляет из себя совокупность прав, которые доступны включенным в роль пользователям. В Windows вы сталкивались с таким понятием как группа (например, группа Администраторы). Роль - это аналог группы в Windows, но чтобы не было недопониманий, в SQL Server используется термин Роль. Роль очень удобно использовать для обращения к целой группе пользователей, которые в нее входят.
</p>

<p>
Первая роль, с которой вы познакомитесь - это роль <b>PUBLIC</b>. Любая база данных по умолчанию включает в себя эту роль и все пользователи, роли и группы входят в ее состав и не могут быть из нее удалены. Поэтому администраторы должны быть очень внимательны, при определении прав этой роли, т.к. дав этой роли права, эти права распространяются на всех абсолютно пользователей базы данных, даже тех, которые будут присоединены в дальнейшем.
</p>

<p>
Роли можно разделить на несколько видов:
</p>

<ol>
	<li>Роли уровня сервера.</li>
	<li>Роли уровня базы данных.</li>
	<li>Роли уровня приложений.</li>
</ol>

<h3 align="center" style="color:#0E0076">Роли уровня сервера.</h3>

<p>
В SQL Server задано 8 ролей уровня сервера.
</p>

<ol>
	<li><b>sysadmin</b> - пользователи, включенные в эту роль, являются владельцами всех баз данных SQL Server. У этих пользователей есть права на выполнение <b>любых</b> операций с SQL Server, даже таких как распределение прав доступа среди других пользователей и настройка системы безопасности SQL Server.
<p>
Пользователь sa принадлежит этой роли, и удалить его из нее нельзя!!! Также закрыть доступ определенному пользователю роли sysadmin к определенной базе невозможно!!!
</p>
<p>
Эта учетная запись собирает воедино возможности всех остальных ролей.
</p>
	</li>
	<li><b>serveradmin</b> - это пользователи, которые являются администраторами сервера, но не имеют отношению к базам данных. Члены этой роли имеют возможность изменять параметры системы (sp_configure), завершать работу SQL Server, выполняя команду SHUTDOWN.
	</li>
	<li><b>setupadmin</b> - отнесенные к этой группе пользователи в праве определять хранимые процедуры, запускаемые при старте сервера. Также у них есть права добавлять, удалять и настраивать удаленные связанные серверы.
	</li>
	<li><b>securityadmin</b> - пользователи этой группы создают и управляют учетными записями SQL Server, а также определяют права доступа к базам данных. Они в праве изменять пароли всех пользователей, кроме пользователей, включенных в sysadmin. Также они имеют возможность считывать журнал ошибок.
	</li>
	<li><b>processadmin</b> - эта роль определяет возможность следить за процессами, которые происходят в SQL Server и в базах данных. Они в праве удалять зависшие запросы, используя для этого команду KILL.
	</li>
	<li><b>dbcreator</b> - обычно в эту роль заносятся пользователи, являющиеся владельцами баз данных, т.к. эта роль включает права на резервное копирование, восстановление баз данных и журналов транзакций, а также на создание, изменение, переименование и удаление баз данных.
	</li>
	<li><b>bulkadmin</b> - пользователи этой группы в праве вызывать оператор BULK INSERT, служащий обычно для массовой вставки данных.
	</li>
	<li><b>diskadmin</b> - эта группа определяет права на управление файлами, подключением устройства резервного копирования. Эта роль была создана для совместимости с предыдущими версиями SQL Server.
	</li>
</ol>

<p>
Для добавления определенного пользователя в определенную роль уровня сервера необходимо использовать системную хранимую процедуру SP_ADDSRVROLEMEMBER. Общий синтаксис:
</p>

<pre style="border-color:#FF0000">

Execute sp_addsrvrolemember [<b>@loginame</b>=]'логин_пользователя', [<b>@rolename</b>=]'имя_роли_уровня_сервера'

</pre>

<p>
Давайте добавим пользователя test_user к роли уровня сервера processadmin.
</p>

<pre>

Execute sp_addsrvrolemember @loginame='test_user', @rolename='processadmin'

</pre>

<p>
Учтите, что для выполнения этой хранимой процедуры у вас должно быть достаточно прав.
</p>

<p>
Для удаления пользователя из определенной роли уровня сервера используется хранимая процедура SP_DROPSRVROLEMEMBER. Общий синтаксис:
</p>

<pre style="border-color:#FF0000">

Execute sp_dropsrvrolemember [<b>@loginame</b>=]'логин_пользователя', [<b>@rolename</b>=]'имя_роли_уровня_сервера'

</pre>

<p>
Давайте теперь произведем удаление пользователя test_user из роли уровня сервера processadmin.
</p>

<pre>

Execute sp_dropsrvrolemember @loginame='test_user', @rolename='processadmin'

</pre>

<p>
Эти же операции можно произвести и с помощью Microsoft SQL Server Management Studio. Для этого нужно в требуемом сервере развернуть папку Security и зайти в Roles, после чего выбрать в контекстном меню требуемой роли уровня сервера пункт меню Properties.
</p>

<img src="img\pict8.jpg"></img>

<p>
Следующее окно предоставит возможность управлять пользователями той роли, для которой был вызван пункт Properties.
</p>

<img src="img\pict9.jpg"></img>

<p>
Нажав на кнопку Add, вы получите возможность выбрать имя пользователя, которого хотите добавить. Если пользователь добавлен, то удалить его можно, выделив его в списке и нажав Remove.
</p>

<h3 style="color:#0E0076;text-align:center">Роли уровня базы данных.</h3>

<p>
Каждая база данных имеет в своем распоряжении набор ролей. Для каждой базы данных эти роли обособлены, и влияние на другие базы данных они не оказывают. Т.е. если пользователь получил права в одной базе, это не открывает ему доступ к другой базе данных.
</p>

<p>
Всего заранее определенных ролей уровня базы данных 9.
</p>

<ol>
	<li><b>db_owner</b> - эта роль назначается владельцам базы данных. Эти пользователи в праве манипулировать любыми данными и настройками в базе данных. В пределах текущей базы их права не ограничены.</li>
	<li><b>db_accessadmin</b> - это пользователи, которые имеют право на управление учетными записями в базе данных. В частности раздают и анулируют права на ее использование.</li>
	<li><b>db_securityadmin</b> - эта роль определяет права на администрирование системы защиты базы данных. Она включает возможность создавать роли, назначать пользователей в определенную роль и настраивать доступ к содержимому базы данных.</li>
	<li><b>db_ddladmin</b> - пользователи этой роли в праве манипулировать объектами базы данных (создавать, удалять, модифицировать), но у них нет прав на определение прав доступа к этим объектам.</li>
	<li><b>db_backupoperator</b> - эти пользователи имеют право производить резервное копирование базы данных.</li>
	<li><b>db_datareader</b> - эта роль определяет возможность всех входящих в ее состав пользователей считывать данные из любой таблицы, представления и функции, без ограничений.</li>
	<li><b>db_datawriter</b> - эти пользователи в праве добавлять, обновлять и удалять данные в текущей базе данных.</li>
	<li><b>db_denydatareader</b> - эта роль запрещает всем ее пользователям производить вычитку данных.</li>
	<li><b>db_denydatawriter</b> - пользователям этой роли запрещается производить добавление, обновление и удаление данных из таблиц и представлений текущей базы данных.</li>
</ol>

<p>
Но кроме этих, заранее определенных ролей, существует возможность создавать собственные пользовательские роли. Для этого служит хранимая процедура SP_ADDROLE. Общий синтаксис:
</p>

<pre style="border-color:#FF0000">

Execute sp_addrole [<b>@rolename</b>=]'имя_роли' [,[<b>@ownername</b>=]'владелец_роли']

</pre>

<p>
Имя_роли - это название создаваемой роли. Оно должно быть уникально в пределах базы данных. Владелец_роли - пользователь, который будет владельцем текущей роли. Если не указать этот параметр, то по умолчанию будет взята учетная запись dbo.
</p>

<p>
Для того чтобы иметь право на добавление роли, пользователь должен быть либо членом роли уровня сервера sysadmin, либо членом роли уровня базы данных db_securityadmin.
</p>

<p>
Чтобы удалить созданную роль необходимо использовать хранимую процедуру SP_DROPROLE. Общий синтаксис:
</p>

<pre style="border-color:#FF0000">

Execute sp_droprole [<b>@rolename</b>=]'имя_роли'

</pre>

<p>
<b>ВНИМАНИЕ!!!</b> Удалить можно только роль, в которой нет ни одного пользователя.
</p>

<p>
Чтобы добавить какого либо пользователя в роль уровня базы данных используется хранимая процедура SP_ADDROLEMEMBER.
</p>

<pre style="border-color:#FF0000">

Execute sp_addrolemember [<b>@membername</b>=]'имя', [<b>@rolename</b>=]'имя_роли_уровня_базы_данных'

</pre>

<p>
Для удаления пользователя из роли уровня базы данных используется хранимая процедура SP_DROPROLEMEMBER.
</p>

<pre style="border-color:#FF0000">

Execute sp_droprolemember [<b>@membername</b>=]'имя', [<b>@rolename</b>=]'имя_роли_уровня_базы_данных'

</pre>

<p>
И в одной и другой хранимых процедурах имя - это либо имя пользователя, либо название роли.
</p>

<p>
<b>ВНИМАНИЕ!!!</b> Добавить пользователя в определенную роль можно только в том случае, если этот пользователь добавлен в базу данных при помощи либо Microsoft SQL Server Management Studio, либо хранимой процедуры sp_grantdbaccess. В противном случае произойдет ошибка, т.к. имя добавляемого пользователя найдено не будет.
</p>

<p>
Хранимая процедура SP_HELPROLE позволят просмотреть список всех ролей, которые есть в базе данных.
</p>

<p>
Пример. Добавим пользователя test_user в сервер, потом в базу данных library и опрделим его в созданную нами же роль test_role.
</p>

<pre>
<pre style="border-color:#00FF00">

execute sp_addlogin @loginame='test_user', @passwd='test' <span style="color=#008080">

/*Добавляем пользователя test_user в SQL Server.*/</span>

</pre>
<pre style="border-color:#00FF00">

use library <span style="color=#008080">/*Открываем базу данных.*/</span>

</pre>
<pre style="border-color:#00FF00">

execute sp_grantdbaccess @loginame='test_user'<span style="color=#008080">

/*Добавляем пользователя test_user в активную базу данных.*/</span>

</pre>
<pre style="border-color:#00FF00">

execute sp_addrole @rolename='test_role' <span style="color=#008080">

/*Создаем в активной базе данных роль test_role.*/</span>

</pre>
<pre style="border-color:#00FF00">

execute sp_addrolemember @rolename='test_role', @membername='test_user' <span style="color=#008080">

/*Добавляем в роль test_role пользователя test_user.*/</span>

</pre>
<pre style="border-color:#00FF00">

execute sp_helprole <span style="color=#008080">

/*Просматриваем список существующих ролей.*/</span>

</pre>
</pre>

<p>
Вот результат просмотра списка ролей:
</p>

<img src="img\pict10.jpg"></img>

<p>
Чтобы просмотреть конкретную роль, существует возможность передать ее имя в качестве параметра хранимой процедуры sp_helprole.
</p>

<p>
А теперь давайте посмотрим список пользователей текущей базы данных.
</p>

<pre>

execute sp_helpuser

</pre>

<img src="img\pict11.jpg"></img>


<p>
Манипулировать с ролями и с пользователями можно также при помощи Microsoft SQL Server Management Studio. Для этого необходимо открыть в требуемой базе папку Roles.
</p>

<img src="img\pict13.jpg"></img>

<p>
Чтобы добавить новую роль уровня базы данных, нужно в контекстном меню выбрать пункт New Datebase Role. Чтобы удалить существующую роль, нужно в контекстном меню к требуемой роли выбрать пункт Удалить.
</p>

<p>
При добавлении роли вам предоставится следующее окно:
</p>

<img src="img\pict12.jpg"></img>

<p>
<b>Role Name</b> - название добавляемой роли. 
</p>

<p>
Чтобы добавить пользователя в определенную роль, нужно зайти в папку Security требуемого сервера, и на требуемом пользователе вызвать пункт меню Свойства.
</p>

<img src="img\pict14.jpg"></img>

<p>
В появившемся окне переходим на вкладку User Mapping и выбираем базу данных, в роль которой необходимо добавить пользователя.
</p>



<h3 style="color:#0E0076;text-align:center">Роли уровня приложений.</h3>

<p>
Казалось бы, чего еще не хватает. Но есть еще один уровень ролей, это роли уровня приложений.
</p>

<p>
Принцип функционирования лучше всего разобрать на примере. Представьте, у вас есть база данных и набор пользователей, для которых уже настроены права доступа. Предположим, в определенный момент времени, вам необходимо провести манипуляции с данными, при этом ваше приложение должно само указать права для всех остальных пользователей, в процессе своей работы. Для этого и служит роль уровня приложения.
</p>

<p>
Роль уровня приложения не может содержать в себе пользователей. Эта роль активируется, указав правильный пароль, и тогда все права ролей остальных пользователей игнорируются, и в силу вступают права роли на уровне приложения. Т.е. само приложение будет отвечать за права пользователей, и их не нужно будет переопределять вручную. Эта роль дезактивируется только при отключении пользователя (приложения), который активировал роль уровня приложения, от сервера.
</p>

<p>
А теперь, рассмотрим принципы создания, удаления и активирования этой роли.
</p>

<p>
Создается такая роль при помощи хранимой процедуры SP_ADDAPPROLE. Общий синтаксис:
</p>

<pre style="border-color:#FF0000">

Execute sp_addapprole [<b>@rolename</b>=]'название_роли', [<b>@password</b>=]'пароль'

</pre>

<p>
Пример. Создаем роль уровня приложения:
</p>

<pre>

Execute sp_addapprole @rolename='AppRole1', @password='App1'

</pre>

<p>
Для ее активации необходима хранимая процедура SP_SETAPPROLE. Общий синтаксис:
</p>

<pre style="border-color:#FF0000">

Execute sp_setapprole [<b>@rolename</b>=]'название_роли', [<b>@password</b>=] {Encrypt N 'пароль'}, [<b>@encrypt</b>=]'тип_шифрования'

</pre>

<p>
Если не указать тип шифрования, то пароль будет передан серверу, как обычный текст. Также можно указать 'odbc'. Это значение будет определять, что нужно использовать специальную функцию для шифрования данных, прежде чем пароль будет послан серверу. После слова Encrypt указывается N, чтобы преобразовать строку в формат Unicode, в котором должна быть шифруемая строка.
</p>

<p>
Пример активирования заранее созданной роли уровня приложения.
</p>

<pre>

Execute sp_setapprole 'AppRole1', {Encrypt N 'App1'},'odbc'

</pre>

<p>
И еще осталось рассмотреть принцип удаления роли уровня приложения. Для этого служит хранимая процедура SP_DROPAPPROLE.
</p>

<pre style="border-color:#FF0000">

Execute sp_dropapprole [<b>@rolename</b>=]'название_роли'

</pre>

<p>
Т.е. чтобы удалить созданную нами роль, необходимо сделать следующий запрос:
</p>

<pre>

Execute sp_dropapprole @rolename='AppRole1'

</pre>

<p>
Также можно изменять пароль роли уровня приложения, использую хранимую процедуру SP_APPROLEPASSWORD.
</p>

<pre style="border-color:#FF0000">

Execute sp_approlepassword [<b>@rolename</b>=]'название_роли', [<b>@newpwd</b>=]'новый_пароль'

</pre>

</Урок>