//Створити клас Vector, який має дві змінних-члени: 
//сам вектор ( double* ) 
//його розмір. ( int ) 
//
//В класі реалізувати наступні методи:
//- Стандартний конструктор Vector() (створює пустий вектор нульового розміру);
//- Перевантажений конструктор Vector( int ), який забороняє неявне приведення до типу (explicit) та задає розмір вектора
//  (елементи вектора повинні ініціалізуватися нулями, хоча, якщо дуже хочеться, можна і рандомними значеннями);
//- Перевантажений конструктор Vector ( double * , int ), що дозволяє ініціалізувати вектор масивом ;
//- Конструктор копій ;
//- Деструктор;
//- Метод, що повертає розмір вектора ( getSize() );
//
//
//- Перевантажені оператори
//
//- Виведення вектора ( << );
//виводить усі елементи вектора через пропуск ( ' ' )
//
//- Введення вектора ( >> );
//спочатку запитує кількість елементів, тоді запитує значення кожного елемента (підказуючи його індекс чи номер)
//
//- Інкремент: збільшення всіх елементів вектора на 1 ( ++ ) (постфікс та префікс). 
//   Причому перевантаження префіксного інкремента організувати поза межами класу;
//
//- Декремент: зменшення всіх елементів вектора на 1 ( -- ) (постфікс та префікс). 
//   Причому перевантаження постфіксного декремента організувати поза межами класу;
//
//- Присвоювання вектора;
//
//- Індексування [ ], що дозволяє доступатись по індексу, для читання і запису значення відповідного елемента;
//  передбачити перевірку індекса на відповідність ( exit(EXIT_FAILURE) )
//
//- Додавання до вектора ( +, += ) -- іншого вектора;
//вектор-результат містить елементи обох векторів-доданків, 
//його розмір рівний сумі розмірів векторів-доданків: 
//вектор1 містить 2.2, 3.3, 4.4, 5.5
//вектор2 містить 2.2, 4.4, 7.7
//вектор1 + вектор2 містить 2.2, 3.3, 4.4, 5.5, 2.2, 4.4, 7.7
//
//- Додавання до вектора ( +, += ) -- числа ( double );
//вектор-результат одержаний з усіх елементів лівого операнда, 
//до яких у кінець додано ще один елемент -- правий операнд
//
//- Віднімання від вектора ( - , -= ) -- іншого вектора;
//  алгоритм віднімання:
//1 варіант: 
//вектор1 містить 2.2, 3.3, 4.4, 5.5
//вектор2 містить 2.2, 4.4, 7.7
//різниця ( вектор1 - вектор2 ) містить 3.3, 5.5
//(вектор-різниця складається з елементів лівого вектора, яких немає у правому векторі,
//тобто, з лівого вектора вилучаються (якщо є) елементи правого вектора. )
//2 варіант: придумайте щось, більш логічне :)
//
//- Віднімання від вектора ( - , -= ) -- числа ( double );
//  алгоритм віднімання:
//1 варіант: 
//вектор1 містить 2.2, 3.3, 4.4, 5.5
//різниця ( вектор1 - 4.4 ) містить 2.2, 3.3, 5.5
//різниця ( вектор1 - 7.7 ) містить 2.2, 3.3, 4.4, 5.5
//(вектор-різниця складається з елементів лівого вектора, 
//з яких вилучено (якщо є) 1 елемент, що рівний правому операнду )
//2 варіант: придумайте щось, більш логічне :)
//
//- Множення вектора ( *,*= )  -- на інший вектор;
//1 варіант: 
//вектор-добуток складається з елементів, одержаних множенням усіх елементів лівого вектора на перший елемент правого вектора, потім -- усіх елементів лівого вектора на другий елемент правого і т.д.:
//вектор1 містить 2.2, 3.3, 4.4
//вектор2 містить 1.0, 2.0
//добуток ( вектор1 * вектор2 ) містить: 2.2, 3.3, 4.4, 4.4, 6.6, 8.8
//2 варіант: 
//вектор-добуток складається з елементів, одержаних поелементним множенням елементів лівого вектора на елементи правого вектора (слід перевіряти рівність розмірів і, при нерівності, переривати exit(EXIT_FAILURE) 
//вектор1 містить 2.2, 3.3, 4.4
//вектор2 містить 1.0, 2.0, 3.0
//добуток ( вектор1 * вектор2 ) містить: 2.2, 6.6, 13.2
//
//3 варіант: 
//поєднати 1 і 2 варіанти. 
//Тобто, якщо розміри векторів рівні -- перемножити поелементно, як у варіанті 2,
//якщо ж розміри векторів різні -- множити, як у варіанті 1
//
//4 варіант: придумайте і реалізуйте щось більш логічне 
//
//- Множення вектора ( *, *=)-- на число ( double );
//кожен елемент вектора множиться на число
//
//- Порівняння вектора з вектором
//два вектори вважаються рівними, якщо їхній вміст ідентичний ( однакові числа у однаковій послідовності )
//
//1 варіант порівняння: поелементне порівняння. 
//Меншим буде той вектор, у якому черговий елемент менший за відповідний елемент іншого вектора,
//або чергового елемента немає взагалі (вектор закінчився).
//вектор {1.1, 2.2, 3.3} менший за вектори {1.1, 2.2, 3.4} , {1.1, 2.2, 3.3, 4.4} 
//вектор {1.1, 2.2, 3.3} більший за вектори  {1.1, 2.2} , {1.1, 2.2, 3.2} , {1.1, 2.2, 3.2, 4.4}
//
//2 варіант порівняння: порівняння контрольних сум векторів. 
//Для кожного вектора обчислюється контрольна сума, 
//у котрого вектора контрольна сума більша -- той вектор і більший.
//Контрольну суму можна обчислювати так: 
//a[0] + a[1] * 10 + a[2] * 100 + a[3] * 1000 + ..... a[n] * 10^n
//або так:
//a[0] + a[1] * 2 + a[2] * 4 + a[3] * 8 + a[n] * 2^n


#include"Vector.h"
int main()
{
	
	Vector V1;
	cout<<"Standart constuctor ="<<V1<<endl;
	Vector V2(5);
	cout<<"Standart constuctor z parametrom ="<<V2<<endl;
	Vector V3;
	cin>>V3;
	cout<<"Vector 3 = "<<V3<<endl;
	
	cout<<"_______Increnent Decrement_______________"<<endl;
	V3++;
	cout<<"Vector 3++ = "<<V3<<endl;
	++V3;
	cout<<"++Vector 3 = "<<V3<<endl;
	V3--;
	cout<<"Vector 3-- = "<<V3<<endl;
	--V3;
	cout<<"--Vector 3 = "<<V3<<endl;
	cout<<"_______ = [] _______________"<<endl;
	Vector V4;
	V4=V3;
	cout<<"Vector V4 = V3  :"<<V4<<endl;
	cout<< "V4[1] = "<<V4[1]<<endl;
	//cout<< "V4[3] = "<<V4[3]<<endl;
	
	cout<<"_______ + +=  _______________"<<endl;
	Vector V5;
	V5=V4+V3; 
	cout<<"V4+V3=V5 "<<V5<<endl;
	V4+=V3;
	cout<<"V4+=V3: "<<V4<<endl;
	V5=V4+2.5; 
	cout<<"V4+2.5=V5 "<<V5<<endl;
	V4+=2.5;
	cout<<"V4+=2.5: "<<V4<<endl;

	cout<<"_______ - -=  _______________"<<endl;
	Vector V6;
	V6=V4-V3; 
	cout<<"V4-V3=V6 "<<V6<<endl;
	V4-=V3;
	cout<<"V4-=V3: "<<V4<<endl;
	cout<<"Add 5.5 and 2.4\n";
	V4+=5.5;
	V4+=2.4;
	//V6=V4-2.5; 
	cout<<"V4-2.5=V6 "<<V6<<endl;
	//V4-=2.5;
	cout<<"V4-=2.5: "<<V4<<endl;

cout<<"_______ * *=  _______________"<<endl;
	Vector V7;
	V7=V4*V3; 
	cout<<"V4*V3=V7 "<<V7<<endl;
	V4*=V3;
	cout<<"V4*=V3: "<<V4<<endl;
	Vector V8;
	V8=V4*5.0; 
	cout<<"V4*5.0=V8 "<<V8<<endl;
	V4*=5.0;
	cout<<"V4*=5.0: "<<V4<<endl;
cout<<"_______== > <_______________"<<endl;
	Vector V9;
	V9=V4;
	cout<<"V9="<<V9<<endl;
	cout<<"V3="<<V3<<endl;
	
	cout<<"V9==V4 -"<<boolalpha<<(V9==V4)<<endl;
	cout<<"V9==V3 -"<<boolalpha<<(V9==V3)<<endl;
	cout<<"V9>V3 -"<<boolalpha<<(V9>V3)<<endl;
	cout<<"V9<V3 -"<<boolalpha<<(V9<V3)<<endl;

	return 0;
}