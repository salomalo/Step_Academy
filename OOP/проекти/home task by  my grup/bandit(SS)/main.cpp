//Наприклад, при натисненні кнопки "Enter" відбувається "обертання" 
//	трьох барабанів (кількість обертів кожного з них обирається довільно), 
//	на яких зображені різні значки; і якщо випадає певна комбінація, то гравець отримує довільний виграш.
//
//Один з прикладів реалізації алгоритму: Початкова кількість очків 1000. 
//У випадку співпадіння трьох значень – виграш +1000 оч., двох – виграш +200, 
//у всіх інших випадках знімається 100 оч. Якщо у користувача кількість очків стає рівна нулю – гра закінчується і виводиться питання: "Перезапустити гру?"
//
//Примітка. Реалізація барабанів має бути заснована на кільцевій черзі.
//
//Ось приблизно опис класів.
//
//Клас Bandit містить три барабани( об'єкти класу Drum )
//та поле із залишком внесених коштів. Якщо залишок рівний 0, гра неможлива. 
//Тобто, для початку гри слід внести гроші. Метод start() зменшує залишок коштів 
//
//на вартість гри і крутить три барабани. Коли обертання усіх трьох барабанів завершиться, 
//Bandit зчитує символи, що випали на кожному з них і відповідно нараховує виграш (якщо є) та збільшує залишок.

#include"Bandit.h"
//#include<ctime>
int main()
{
	char Y='Y';
	Bandit B2;
	B2.FillDrum(6);
	do
	{
		cout<<"Deposit money into your account = ";cin>>B2.sum;
		system("cls");
		B2.Start();
		cout<<"Do you want to try again? Press Y/N = ";
		cin>>Y;
	}
	while( Y=='y');

	return 0;
}
