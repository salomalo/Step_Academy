//Створіть клас XString, який описує рядок. Клас повинен містити наступні конструктори:
//
//конструктор по замовчуванню, який дозволяє створити рядок довжиною 80 символів;
//конструктор, який створює рядок та ініціалізує його рядком, переданим в якості параметра;
//конструктор копій.
//Крім того, даний клас повинен містити набір перевантажених операцій для роботи з XString-ами:
//операція *: повинна повертати новий рядок, який утворюється шляхом перетину двох рядків, 
//тобто їх спільні символи. Наприклад, результатом перетину рядків "Microsoft" та "Windows" буде рядок "ioso".


//операція /: повинна повертати новий рядок, який утворюється шляхом відбору символів першого рядка, яких немає в другому. Наприклад, результатом ділення рядка "Microsoft" на "Windows" буде рядок "Mcrft".
//операцію +, що дозволяє додати два рядки (конкатенація рядків). Наприклад, результатом додавання двох рядків "Microsoft" та "Windows" буде рядок "MicrosoftWindows".
//операцій *=, /= та +=, які діють по вищеописаному принципу. 
//Операторів порівняння: <, >, <=, >=, ==, != для можливості порівняння двох рядків
//Оператора ! (NOT), що дозволить здійснити реверс рядка. Наприклад, результатом реверсу рядка "Windows" буде рядок "swodniW".
//Приведення до типу char*.
#include "XString.h"
#include "Var.h"



void main()
{
	Var v1("hello ");
	Var v2("world");
	Var v3(3);
	Var v4(5.5);

	Var v6("a32");
	Var v7("345");

	cout<<"          +           "<<endl;
	cout<<v1+v2;
	cout<<v1+v3;
	cout<<v1+v4;

	cout<<"          -           "<<endl;
	cout<<v4-v3;
	cout<<v3-v4;

	cout<<"          *           "<<endl;
	cout<<v6*v7;

	cout<<"           /           "<<endl;
	cout<<v6/v7;

	cout<<"                    <>        "<<endl;
	cout<<v3<<">"<<v4<<boolalpha<<"  " <<(v3>v4)<<endl;
	cout<<v3<<" < "<<v4<<boolalpha<<"  " <<(v3<v4)<<endl;
	cout<<v6<<" < "<<v7<<boolalpha<<"  " <<(v6<v7)<<endl;
	cout<<v6<<" > "<<v7<<boolalpha<<"  " <<(v6>v7)<<endl;

	cout<<"                  !=  ==        "<<endl;
	cout<<v3<<" == "<<v4<<boolalpha<<"  " <<(v3==v4)<<endl;
	cout<<v6<<" == "<<v7<<boolalpha<<"  " <<(v6==v7)<<endl;
	
	cout<<v3<<" != "<<v4<<boolalpha<<"  " <<(v3!=v4)<<endl;
	cout<<v6<<" != "<<v7<<boolalpha<<"  " <<(v6!=v7)<<endl;


	cout<<"to int"<<endl;
	int a=v3;
	cout<<a<<endl;
	a=v4;
	cout<<a<<endl;
	a=v7;
	cout<<a<<endl;
	a=v1;
	cout<<a<<endl; // приведення 'str' до int дає 0 

	cout<<"to char"<<endl;
	char *b =new char[255];
	b=strcpy(b,v1);
	cout<<b;

	cout<<endl<<"  +=   "<<endl;
	v4+=v3;
	cout<<v4;

	cout<<endl<<"  -=   "<<endl;
	v4-=v3;
	cout<<v4;

	cout<<endl<<"  /=   "<<endl;
	v4/=v3;
	cout<<v4;

	cout<<endl<<"  *=   "<<endl;
	v4*=v3;
	cout<<v4;





}